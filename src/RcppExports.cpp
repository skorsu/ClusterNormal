// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// log_sum_exp
arma::vec log_sum_exp(arma::vec log_unnorm_prob);
RcppExport SEXP _ClusterNormal_log_sum_exp(SEXP log_unnorm_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type log_unnorm_prob(log_unnorm_probSEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum_exp(log_unnorm_prob));
    return rcpp_result_gen;
END_RCPP
}
// rmultinom_1
Rcpp::IntegerVector rmultinom_1(Rcpp::NumericVector& probs, unsigned int& N);
RcppExport SEXP _ClusterNormal_rmultinom_1(SEXP probsSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinom_1(probs, N));
    return rcpp_result_gen;
END_RCPP
}
// adjust_alpha
arma::vec adjust_alpha(int K_max, arma::vec clus_assign, arma::vec alpha_vec);
RcppExport SEXP _ClusterNormal_adjust_alpha(SEXP K_maxSEXP, SEXP clus_assignSEXP, SEXP alpha_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type clus_assign(clus_assignSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_vec(alpha_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(adjust_alpha(K_max, clus_assign, alpha_vec));
    return rcpp_result_gen;
END_RCPP
}
// SFDMM_rGibbs
Rcpp::List SFDMM_rGibbs(arma::vec y, arma::vec sm_clus, arma::vec ci_init, arma::vec mu, arma::vec s2, arma::uvec S, double a0, double b0, double mu0, double s20);
RcppExport SEXP _ClusterNormal_SFDMM_rGibbs(SEXP ySEXP, SEXP sm_clusSEXP, SEXP ci_initSEXP, SEXP muSEXP, SEXP s2SEXP, SEXP SSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mu0SEXP, SEXP s20SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sm_clus(sm_clusSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ci_init(ci_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type s20(s20SEXP);
    rcpp_result_gen = Rcpp::wrap(SFDMM_rGibbs(y, sm_clus, ci_init, mu, s2, S, a0, b0, mu0, s20));
    return rcpp_result_gen;
END_RCPP
}
// log_inv_gamma
double log_inv_gamma(double s2_k, double a0, double b0);
RcppExport SEXP _ClusterNormal_log_inv_gamma(SEXP s2_kSEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type s2_k(s2_kSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(log_inv_gamma(s2_k, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// log_param_prior
double log_param_prior(arma::vec ci, arma::vec mu, arma::vec s2, double a0, double b0, double mu0, double s20);
RcppExport SEXP _ClusterNormal_log_param_prior(SEXP ciSEXP, SEXP muSEXP, SEXP s2SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mu0SEXP, SEXP s20SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type s20(s20SEXP);
    rcpp_result_gen = Rcpp::wrap(log_param_prior(ci, mu, s2, a0, b0, mu0, s20));
    return rcpp_result_gen;
END_RCPP
}
// log_cluster_prior
double log_cluster_prior(arma::vec ci, double xi0);
RcppExport SEXP _ClusterNormal_log_cluster_prior(SEXP ciSEXP, SEXP xi0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< double >::type xi0(xi0SEXP);
    rcpp_result_gen = Rcpp::wrap(log_cluster_prior(ci, xi0));
    return rcpp_result_gen;
END_RCPP
}
// log_proposal
double log_proposal(arma::vec y, arma::vec ci_after, arma::vec ci_before, arma::vec sm_clus, arma::vec mu_before, arma::vec s2_before, arma::uvec S);
RcppExport SEXP _ClusterNormal_log_proposal(SEXP ySEXP, SEXP ci_afterSEXP, SEXP ci_beforeSEXP, SEXP sm_clusSEXP, SEXP mu_beforeSEXP, SEXP s2_beforeSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ci_after(ci_afterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ci_before(ci_beforeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sm_clus(sm_clusSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_before(mu_beforeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2_before(s2_beforeSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(log_proposal(y, ci_after, ci_before, sm_clus, mu_before, s2_before, S));
    return rcpp_result_gen;
END_RCPP
}
// fmm_rcpp
Rcpp::List fmm_rcpp(int iter, arma::vec y, unsigned int K_max, double a0, double b0, double mu0, double s20, double xi0, arma::vec ci_init);
RcppExport SEXP _ClusterNormal_fmm_rcpp(SEXP iterSEXP, SEXP ySEXP, SEXP K_maxSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mu0SEXP, SEXP s20SEXP, SEXP xi0SEXP, SEXP ci_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type s20(s20SEXP);
    Rcpp::traits::input_parameter< double >::type xi0(xi0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ci_init(ci_initSEXP);
    rcpp_result_gen = Rcpp::wrap(fmm_rcpp(iter, y, K_max, a0, b0, mu0, s20, xi0, ci_init));
    return rcpp_result_gen;
END_RCPP
}
// SFDMM_realloc
Rcpp::List SFDMM_realloc(arma::vec y, unsigned int K_max, double a0, double b0, double mu0, double s20, double xi0, arma::vec ci_init, arma::vec mu, arma::vec s2, arma::vec alpha_vec);
RcppExport SEXP _ClusterNormal_SFDMM_realloc(SEXP ySEXP, SEXP K_maxSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mu0SEXP, SEXP s20SEXP, SEXP xi0SEXP, SEXP ci_initSEXP, SEXP muSEXP, SEXP s2SEXP, SEXP alpha_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type s20(s20SEXP);
    Rcpp::traits::input_parameter< double >::type xi0(xi0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ci_init(ci_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_vec(alpha_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(SFDMM_realloc(y, K_max, a0, b0, mu0, s20, xi0, ci_init, mu, s2, alpha_vec));
    return rcpp_result_gen;
END_RCPP
}
// SFDMM_SM
Rcpp::List SFDMM_SM(arma::vec y, unsigned int K_max, double a0, double b0, double mu0, double s20, double xi0, arma::vec ci_init, arma::vec mu_init, arma::vec s2_init, arma::vec alpha_init, int launch_iter, double a_theta, double b_theta);
RcppExport SEXP _ClusterNormal_SFDMM_SM(SEXP ySEXP, SEXP K_maxSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mu0SEXP, SEXP s20SEXP, SEXP xi0SEXP, SEXP ci_initSEXP, SEXP mu_initSEXP, SEXP s2_initSEXP, SEXP alpha_initSEXP, SEXP launch_iterSEXP, SEXP a_thetaSEXP, SEXP b_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type s20(s20SEXP);
    Rcpp::traits::input_parameter< double >::type xi0(xi0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ci_init(ci_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2_init(s2_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< int >::type launch_iter(launch_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b_theta(b_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(SFDMM_SM(y, K_max, a0, b0, mu0, s20, xi0, ci_init, mu_init, s2_init, alpha_init, launch_iter, a_theta, b_theta));
    return rcpp_result_gen;
END_RCPP
}
// SFDMM_param
Rcpp::List SFDMM_param(arma::vec clus_assign, arma::vec y, arma::vec mu, arma::vec s2, arma::vec alpha_vec, double old_U, unsigned int K_max, double a0, double b0, double mu0, double s20, double xi0);
RcppExport SEXP _ClusterNormal_SFDMM_param(SEXP clus_assignSEXP, SEXP ySEXP, SEXP muSEXP, SEXP s2SEXP, SEXP alpha_vecSEXP, SEXP old_USEXP, SEXP K_maxSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mu0SEXP, SEXP s20SEXP, SEXP xi0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type clus_assign(clus_assignSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_vec(alpha_vecSEXP);
    Rcpp::traits::input_parameter< double >::type old_U(old_USEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type s20(s20SEXP);
    Rcpp::traits::input_parameter< double >::type xi0(xi0SEXP);
    rcpp_result_gen = Rcpp::wrap(SFDMM_param(clus_assign, y, mu, s2, alpha_vec, old_U, K_max, a0, b0, mu0, s20, xi0));
    return rcpp_result_gen;
END_RCPP
}
// SFDMM_model
Rcpp::List SFDMM_model(int iter, unsigned int K_max, arma::vec init_assign, arma::vec y, double a0, double b0, double mu0, double s20, double xi0, double a_theta, double b_theta, int launch_iter, int print_iter);
RcppExport SEXP _ClusterNormal_SFDMM_model(SEXP iterSEXP, SEXP K_maxSEXP, SEXP init_assignSEXP, SEXP ySEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mu0SEXP, SEXP s20SEXP, SEXP xi0SEXP, SEXP a_thetaSEXP, SEXP b_thetaSEXP, SEXP launch_iterSEXP, SEXP print_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_assign(init_assignSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type s20(s20SEXP);
    Rcpp::traits::input_parameter< double >::type xi0(xi0SEXP);
    Rcpp::traits::input_parameter< double >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b_theta(b_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type launch_iter(launch_iterSEXP);
    Rcpp::traits::input_parameter< int >::type print_iter(print_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(SFDMM_model(iter, K_max, init_assign, y, a0, b0, mu0, s20, xi0, a_theta, b_theta, launch_iter, print_iter));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _ClusterNormal_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _ClusterNormal_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _ClusterNormal_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _ClusterNormal_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ClusterNormal_log_sum_exp", (DL_FUNC) &_ClusterNormal_log_sum_exp, 1},
    {"_ClusterNormal_rmultinom_1", (DL_FUNC) &_ClusterNormal_rmultinom_1, 2},
    {"_ClusterNormal_adjust_alpha", (DL_FUNC) &_ClusterNormal_adjust_alpha, 3},
    {"_ClusterNormal_SFDMM_rGibbs", (DL_FUNC) &_ClusterNormal_SFDMM_rGibbs, 10},
    {"_ClusterNormal_log_inv_gamma", (DL_FUNC) &_ClusterNormal_log_inv_gamma, 3},
    {"_ClusterNormal_log_param_prior", (DL_FUNC) &_ClusterNormal_log_param_prior, 7},
    {"_ClusterNormal_log_cluster_prior", (DL_FUNC) &_ClusterNormal_log_cluster_prior, 2},
    {"_ClusterNormal_log_proposal", (DL_FUNC) &_ClusterNormal_log_proposal, 7},
    {"_ClusterNormal_fmm_rcpp", (DL_FUNC) &_ClusterNormal_fmm_rcpp, 9},
    {"_ClusterNormal_SFDMM_realloc", (DL_FUNC) &_ClusterNormal_SFDMM_realloc, 11},
    {"_ClusterNormal_SFDMM_SM", (DL_FUNC) &_ClusterNormal_SFDMM_SM, 14},
    {"_ClusterNormal_SFDMM_param", (DL_FUNC) &_ClusterNormal_SFDMM_param, 12},
    {"_ClusterNormal_SFDMM_model", (DL_FUNC) &_ClusterNormal_SFDMM_model, 13},
    {"_ClusterNormal_rcpparma_hello_world", (DL_FUNC) &_ClusterNormal_rcpparma_hello_world, 0},
    {"_ClusterNormal_rcpparma_outerproduct", (DL_FUNC) &_ClusterNormal_rcpparma_outerproduct, 1},
    {"_ClusterNormal_rcpparma_innerproduct", (DL_FUNC) &_ClusterNormal_rcpparma_innerproduct, 1},
    {"_ClusterNormal_rcpparma_bothproducts", (DL_FUNC) &_ClusterNormal_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ClusterNormal(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
