# fviz_nbclust(scale(data_sim_1), kmeans, method = "wss")
# kmeans(scale(data_sim_1), 2)
table(ci_actual_1, kmeans(scale(data_sim_1), 2)$cluster)
## PAM
# fviz_nbclust(scale(data_sim_1), pam, method = "wss")
table(ci_actual_1, pam(scale(data_sim_1), 2)$clustering)
## EM
table(ci_actual_1, Mclust(scale(data_sim_1))$classification)
result_s1[[3]][[2]] ## set 3
fviz_nbclust(scale(data_sim_2), kmeans, method = "wss")
table(ci_actual_1, kmeans(scale(data_sim_2), 2)$cluster)
table(ci_actual_2, kmeans(scale(data_sim_2), 2)$cluster)
fviz_nbclust(scale(data_sim_2), pam, method = "wss")
## PAM
# fviz_nbclust(scale(data_sim_2), pam, method = "wss")
table(ci_actual_2, pam(scale(data_sim_2), 2)$clustering)
## EM
table(ci_actual_2, Mclust(scale(data_sim_2))$classification)
## K-Means
# fviz_nbclust(scale(data_sim_2), kmeans, method = "wss")
table(ci_actual_2, kmeans(scale(data_sim_2), 2)$cluster)
## PAM
# fviz_nbclust(scale(data_sim_2), pam, method = "wss")
table(ci_actual_2, pam(scale(data_sim_2), 2)$clustering)
## EM
table(ci_actual_2, Mclust(scale(data_sim_2))$classification)
result_s2[[4]][[2]]
fviz_nbclust(scale(data_sim_3), kmeans, method = "wss")
## K-Means
# fviz_nbclust(scale(data_sim_3), kmeans, method = "wss")
table(ci_actual_3, kmeans(scale(data_sim_3), 2)$cluster)
## PAM
# fviz_nbclust(scale(data_sim_3), pam, method = "wss")
table(ci_actual_2, pam(scale(data_sim_2), 2)$clustering)
fviz_nbclust(scale(data_sim_3), pam, method = "wss")
## K-Means
# fviz_nbclust(scale(data_sim_3), kmeans, method = "wss")
table(ci_actual_3, kmeans(scale(data_sim_3), 2)$cluster)
## PAM
# fviz_nbclust(scale(data_sim_3), pam, method = "wss")
table(ci_actual_3, pam(scale(data_sim_3), 2)$clustering)
## EM
table(ci_actual_3, Mclust(scale(data_sim_3))$classification)
result_s3[[1]][[2]]
result_s3[[4]][[2]]
result_s3[[1]][[2]] ## set 1
result_s3[[2]][[2]] ## set 2
result_s3[[3]][[2]] ## set 3
result_s3[[1]][[2]] ## set 1
fviz_nbclust(scale(data_sim_4), kmeans, method = "wss")
## K-Means
# fviz_nbclust(scale(data_sim_4), kmeans, method = "wss")
table(ci_actual_4, kmeans(scale(data_sim_4), 2)$cluster)
fviz_nbclust(scale(data_sim_4), pam, method = "wss")
## PAM
# fviz_nbclust(scale(data_sim_4), pam, method = "wss")
table(ci_actual_4, pam(scale(data_sim_4), 2)$clustering)
## EM
table(ci_actual_4, Mclust(scale(data_sim_4))$classification)
result_s4[[1]][[2]]
## K-Means
# fviz_nbclust(scale(data_sim_4), kmeans, method = "wss")
table(ci_actual_4, kmeans(scale(data_sim_4), 2)$cluster)
## PAM
# fviz_nbclust(scale(data_sim_4), pam, method = "wss")
table(ci_actual_4, pam(scale(data_sim_4), 2)$clustering)
## EM
table(ci_actual_4, Mclust(scale(data_sim_4))$classification)
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(RcppArmadillo)
library(salso)
library(ClusterNormal)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(doParallel)
library(mclustcomp)
library(factoextra)
library(cluster)
library(mclust)
set.seed(2)
ci_actual <- sample(1:2, 500, replace = TRUE)
data_sim <- rnorm(500, c(-5, 5)[ci_actual], 1)
p1 <- data.frame(ci_actual, data_sim) %>%
ggplot(aes(x = data_sim, fill = factor(ci_actual))) +
geom_histogram(alpha=0.6, position = 'identity', bins = 50) +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_bw() +
labs(fill="", x = "Data", y = "", title = "Setting #1")
set.seed(2)
ci_actual <- sample(1:5, 500, replace = TRUE)
data_sim <- rnorm(500, c(-100, -50, 0, 50, 100)[ci_actual], 1)
p2 <- data.frame(ci_actual, data_sim) %>%
ggplot(aes(x = data_sim, fill = factor(ci_actual))) +
geom_histogram(alpha=0.6, position = 'identity', bins = 50) +
scale_fill_manual(values=c("#69b3a2", "#404080", "#F99985", "#000000", "#FF4CB0")) +
theme_bw() +
labs(fill="", x = "Data", y = "", title = "Setting #2")
set.seed(2)
ci_actual <- sample(1:2, 500, replace = TRUE)
data_sim <- rnorm(500, c(-5, 5)[ci_actual], 4)
p3 <- data.frame(ci_actual, data_sim) %>%
ggplot(aes(x = data_sim, fill = factor(ci_actual))) +
geom_histogram(alpha=0.6, position = 'identity', bins = 50) +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_bw() +
labs(fill="", x = "Data", y = "", title = "Setting #3")
set.seed(2)
ci_actual <- sample(1:5, 500, replace = TRUE)
data_sim <- rnorm(500, c(-10, -5, 0, 20, 40)[ci_actual], c(1.5, 1.5, 1.5, 3, 3)[ci_actual])
p4 <- data.frame(ci_actual, data_sim) %>%
ggplot(aes(x = data_sim, fill = factor(ci_actual))) +
geom_histogram(alpha=0.6, position = 'identity', bins = 50) +
scale_fill_manual(values=c("#69b3a2", "#404080", "#F99985", "#000000", "#FF4CB0")) +
theme_bw() +
labs(fill="", x = "Data", y = "", title = "Setting #4")
grid.arrange(p1, p2, p3, p4)
## Data Simulation
rm(list = ls())
seed_val <- 2
### Setting 1
set.seed(seed_val)
ci_actual_1 <- sample(1:2, 500, replace = TRUE)
data_sim_1 <- rnorm(500, c(-5, 5)[ci_actual_1], 1)
### Setting 2
set.seed(seed_val)
ci_actual_2 <- sample(1:5, 500, replace = TRUE)
data_sim_2 <- rnorm(500, c(-100, -50, -20, 50, 100)[ci_actual_2], 1)
### Setting 3
set.seed(seed_val)
ci_actual_3 <- sample(1:2, 500, replace = TRUE)
data_sim_3 <- rnorm(500, c(-5, 5)[ci_actual_3], 4)
### Setting 4
set.seed(seed_val)
ci_actual_4 <- sample(1:5, 500, replace = TRUE)
data_sim_4 <- rnorm(500, c(-10, -5, 0, 20, 40)[ci_actual_4],
c(1.5, 1.5, 1.5, 3, 3)[ci_actual_4])
### Set of the hyperparameter
set.seed(seed_val)
s1 <- list(K = 5, init_clus = rep(1, 500))
s2 <- list(K = 10, init_clus = rep(1, 500))
s3 <- list(K = 10, init_clus = sample(1:10, 500, TRUE))
param_hyper <- list(s1, s2, s3)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s1 <- foreach(t = 1:3) %dopar% {
### Hyperparameter
K <- param_hyper[[t]]$K
xi_vec <- rep(1, K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, param_hyper[[t]]$init_clus, xi_vec,
scale(data_sim_1), a_sigma_vec, b_sigma_vec, lambda_vec,
mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_1, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s1[[1]][[2]] ## set 1
result_s1[[2]][[2]] ## set 2
result_s1[[3]][[2]] ## set 3
### Setting 1 (Singleton)
set.seed(seed_val)
ci_actual_1_s <- sample(1:2, 100, replace = TRUE)
data_sim_1_s <- rnorm(100, c(-5, 5)[ci_actual_1], 1)
### Concentration hyperparameter
xi_trial <- c(10, 1, 0.1, 0.01)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s1_s <- foreach(t = 1:4) %dopar% {
### Hyperparameter
K <- 100
xi_vec <- rep(xi_trial[t], K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, 1:100, xi_vec, scale(data_sim_1_s), a_sigma_vec,
b_sigma_vec, lambda_vec, mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_1_s, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s1_s[[1]][[2]] ## xi = 10
result_s1_s[[2]][[2]] ## xi = 1
result_s1_s[[3]][[2]] ## xi = 0.1
result_s1_s[[4]][[2]] ## xi = 0.01
### Set of the hyperparameter
set.seed(seed_val)
s1 <- list(K = 10, init_clus = ci_actual_2)
s2 <- list(K = 10, init_clus = rep(1, 500))
s3 <- list(K = 20, init_clus = rep(1, 500))
s4 <- list(K = 20, init_clus = sample(1:20, 500, TRUE))
param_hyper <- list(s1, s2, s3, s4)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s2 <- foreach(t = 1:4) %dopar% {
### Hyperparameter
K <- param_hyper[[t]]$K
xi_vec <- rep(1, K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, param_hyper[[t]]$init_clus, xi_vec,
scale(data_sim_2), a_sigma_vec, b_sigma_vec, lambda_vec,
mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_2, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s2[[1]][[2]] ## set 1
result_s2[[2]][[2]] ## set 2
result_s2[[3]][[2]] ## set 3
result_s2[[4]][[2]] ## set 4
### Set of the hyperparameter
set.seed(seed_val)
s1 <- list(K = 10, init_clus = ci_actual_2)
s2 <- list(K = 10, init_clus = rep(1, 500))
s3 <- list(K = 20, init_clus = rep(1, 500))
s4 <- list(K = 20, init_clus = sample(1:20, 500, TRUE))
param_hyper <- list(s1, s2, s3, s4)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s2 <- foreach(t = 1:4) %dopar% {
### Hyperparameter
K <- param_hyper[[t]]$K
xi_vec <- rep(1, K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, param_hyper[[t]]$init_clus, xi_vec,
scale(data_sim_2), a_sigma_vec, b_sigma_vec, lambda_vec,
mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_2, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s2[[1]][[2]] ## set 1
result_s2[[2]][[2]] ## set 2
result_s2[[3]][[2]] ## set 3
result_s2[[4]][[2]] ## set 4
### Setting 2 (Singleton)
set.seed(seed_val)
ci_actual_2_s <- sample(1:5, 100, replace = TRUE)
data_sim_2_s <- rnorm(100, c(-100, -50, 0, 50, 100)[ci_actual_2_s], 1)
### Concentration hyperparameter
xi_trial <- c(10, 1, 0.1, 0.01)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s2_s <- foreach(t = 1:4) %dopar% {
### Hyperparameter
K <- 100
xi_vec <- rep(xi_trial[t], K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, 1:100, xi_vec, scale(data_sim_2_s), a_sigma_vec,
b_sigma_vec, lambda_vec, mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_2_s, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s2_s[[1]][[2]] ## xi = 10
result_s2_s[[2]][[2]] ## xi = 1
result_s2_s[[3]][[2]] ## xi = 0.1
result_s2_s[[4]][[2]] ## xi = 0.01
### Set of the hyperparameter
set.seed(seed_val)
s1 <- list(K = 5, init_clus = rep(1, 500))
s2 <- list(K = 10, init_clus = ci_actual_3)
s3 <- list(K = 10, init_clus = rep(1, 500))
s4 <- list(K = 10, init_clus = sample(1:10, 500, TRUE))
param_hyper <- list(s1, s2, s3, s4)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s3 <- foreach(t = 1:4) %dopar% {
### Hyperparameter
K <- param_hyper[[t]]$K
xi_vec <- rep(1, K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, param_hyper[[t]]$init_clus, xi_vec,
scale(data_sim_3), a_sigma_vec, b_sigma_vec, lambda_vec,
mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_3, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s3[[1]][[2]] ## set 1
result_s3[[2]][[2]] ## set 2
result_s3[[3]][[2]] ## set 3
result_s3[[4]][[2]] ## set 4
### Set of the hyperparameter
set.seed(seed_val)
s1 <- list(K = 5, init_clus = rep(1, 500))
s2 <- list(K = 10, init_clus = ci_actual_3)
s3 <- list(K = 10, init_clus = rep(1, 500))
s4 <- list(K = 10, init_clus = sample(1:10, 500, TRUE))
param_hyper <- list(s1, s2, s3, s4)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s3 <- foreach(t = 1:4) %dopar% {
### Hyperparameter
K <- param_hyper[[t]]$K
xi_vec <- rep(1, K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, param_hyper[[t]]$init_clus, xi_vec,
scale(data_sim_3), a_sigma_vec, b_sigma_vec, lambda_vec,
mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_3, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s3[[1]][[2]] ## set 1
result_s3[[2]][[2]] ## set 2
result_s3[[3]][[2]] ## set 3
result_s3[[4]][[2]] ## set 4
### Setting 3 (Singleton)
set.seed(seed_val)
ci_actual_3_s <- sample(1:2, 100, replace = TRUE)
data_sim_3_s <- rnorm(100, c(-5, 5)[ci_actual_3_s], 4)
### Concentration hyperparameter
xi_trial <- c(10, 1, 0.1, 0.01)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s3_s <- foreach(t = 1:4) %dopar% {
### Hyperparameter
K <- 100
xi_vec <- rep(xi_trial[t], K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, 1:100, xi_vec, scale(data_sim_3_s), a_sigma_vec,
b_sigma_vec, lambda_vec, mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_3_s, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s3_s[[1]][[2]] ## xi = 10
result_s3_s[[2]][[2]] ## xi = 1
result_s3_s[[3]][[2]] ## xi = 0.1
result_s3_s[[4]][[2]] ## xi = 0.01
### Set of the hyperparameter
set.seed(seed_val)
s1 <- list(K = 10, init_clus = ci_actual_4)
s2 <- list(K = 10, init_clus = rep(1, 500))
s3 <- list(K = 20, init_clus = rep(1, 500))
s4 <- list(K = 20, init_clus = sample(1:20, 500, TRUE))
param_hyper <- list(s1, s2, s3, s4)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s4 <- foreach(t = 1:4) %dopar% {
### Hyperparameter
K <- param_hyper[[t]]$K
xi_vec <- rep(1, K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, param_hyper[[t]]$init_clus, xi_vec,
scale(data_sim_4), a_sigma_vec, b_sigma_vec, lambda_vec,
mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_4, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s4[[1]][[2]] ## set 1
result_s4[[2]][[2]] ## set 2
result_s4[[3]][[2]] ## set 3
result_s4[[4]][[2]] ## set 4
### Setting 4 (Singleton)
set.seed(seed_val)
ci_actual_4_s <- sample(1:5, 100, replace = TRUE)
data_sim_4_s <- rnorm(100, c(-10, -5, 0, 20, 40)[ci_actual_4_s],
c(1.5, 1.5, 1.5, 3, 3)[ci_actual_4_s])
### Concentration hyperparameter
xi_trial <- c(10, 1, 0.1, 0.01)
### Run the model
registerDoParallel( detectCores() - 1 )
set.seed(seed_val, kind = "L'Ecuyer-CMRG")
result_s4_s <- foreach(t = 1:4) %dopar% {
### Hyperparameter
K <- 100
xi_vec <- rep(xi_trial[t], K)
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.1, K)
### Analysis
start_time <- Sys.time()
result_mat <- fmm_mod(1000, K, 1:100, xi_vec, scale(data_sim_4_s), a_sigma_vec,
b_sigma_vec, lambda_vec, mu0_vec)
run_time <- Sys.time() - start_time
new_assign <- as.numeric(salso(result_mat[-(1:500), ]))
final_result <- table(ci_actual_4_s, new_assign)
list(run_time, final_result, new_assign)
}
stopImplicitCluster()
result_s4_s[[1]][[2]] ## xi = 10
result_s4_s[[2]][[2]] ## xi = 1
result_s4_s[[3]][[2]] ## xi = 0.1
result_s4_s[[4]][[2]] ## xi = 0.01
## K-Means
# fviz_nbclust(scale(data_sim_1), kmeans, method = "wss")
table(ci_actual_1, kmeans(scale(data_sim_1), 2)$cluster)
## PAM
# fviz_nbclust(scale(data_sim_1), pam, method = "wss")
table(ci_actual_1, pam(scale(data_sim_1), 2)$clustering)
## EM
table(ci_actual_1, Mclust(scale(data_sim_1))$classification)
result_s1[[3]][[2]]
## K-Means
# fviz_nbclust(scale(data_sim_2), kmeans, method = "wss")
table(ci_actual_2, kmeans(scale(data_sim_2), 2)$cluster)
## PAM
# fviz_nbclust(scale(data_sim_2), pam, method = "wss")
table(ci_actual_2, pam(scale(data_sim_2), 2)$clustering)
## EM
table(ci_actual_2, Mclust(scale(data_sim_2))$classification)
result_s2[[4]][[2]]
## K-Means
# fviz_nbclust(scale(data_sim_3), kmeans, method = "wss")
table(ci_actual_3, kmeans(scale(data_sim_3), 2)$cluster)
## PAM
# fviz_nbclust(scale(data_sim_3), pam, method = "wss")
table(ci_actual_3, pam(scale(data_sim_3), 2)$clustering)
## EM
table(ci_actual_3, Mclust(scale(data_sim_3))$classification)
result_s3[[1]][[2]] ## set 1
## K-Means
# fviz_nbclust(scale(data_sim_4), kmeans, method = "wss")
table(ci_actual_4, kmeans(scale(data_sim_4), 2)$cluster)
## PAM
# fviz_nbclust(scale(data_sim_4), pam, method = "wss")
table(ci_actual_4, pam(scale(data_sim_4), 2)$clustering)
## EM
table(ci_actual_4, Mclust(scale(data_sim_4))$classification)
result_s4[[1]][[2]]
### Required Library: ----------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(mvtnorm)
library(tidyverse)
library(DirichletReg)
library(salso)
library(rootSolve)
library(metRology)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
