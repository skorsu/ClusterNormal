library(foreach)
library(doParallel)
library(doRNG)
iter <- 5000
burn_in <- 2500
overall_seed <- 31807
n_para <- 10
### Function: Summary Quantities "Mean (SD)".
bal_quan <- function(num_vec, rounding = 4){
mean_val <- round(mean(num_vec), 4)
sd_val <- round(sd(num_vec), 4)
paste0(mean_val, " (", sd_val, ")")
}
### Function: Summary from the result
summary_para <- function(result_list){
### Collect the data
n_cluster_vec <- rep(NA, n_para)
time_vec <- rep(NA, n_para)
clus_quality <- matrix(NA, ncol = 3, nrow = n_para)
for(i in 1:n_para){
n_cluster_vec[i] <- result_list[[i]]$n_cluster
time_vec[i] <- result_list[[i]]$time
clus_quality[i, ] <- result_model[[i]]$clus_measure[c(1, 5, 22), 2]
}
data.frame(n_cluster = bal_quan(n_cluster_vec), time = bal_quan(time_vec)) %>%
data.frame(t(apply(clus_quality, 2, bal_quan))) %>%
kbl(col.names = c("# cluster", "time", "Adjusted Rand", "Jaccard", "VI"))
}
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(10, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
print(difftime(Sys.time(), overall_start, units = "secs"))
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, ci_true, scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
result_model
result_model[[1]]
result_model[[1]]$n_cluster
(result_model[[1:15]]$n_cluster)
(result_model[[2]]$n_cluster)
(result_model[[3]]$n_cluster)
(result_model[[10]]$n_cluster)
(result_model[[16]]$n_cluster)
(result_model[[6]]$n_cluster)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(mean = mean(y))
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(mean = mean(y))
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(mean = mean(y)) %>> .$mean
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>> .$center
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>% .$center
### Function: Calculate mean and variance
mean_var <- function(num_vec){
c(mean(mean_var), var(mean_var))
}
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>% .$center %>% mean_var()
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>% .$center
### Function: Calculate mean and variance
mean_var <- function(num_vec){
c(mean(num_vec), var(num_vec))
}
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>% .$center %>% mean_var()
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>% .$center %>% mean_var()
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>% .$center %>% mean_var()
ci_true <- sample(1:10, 500, replace = TRUE)
dat <- rnorm(500, ((1:10)*10)[ci_true])
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>% .$center %>% mean_var()
hist(scale(dat))
hist(scale(dat), breaks = 100)
summary_para(result_model)
ci_true <- sample(1:10, 500, replace = TRUE)
dat <- rnorm(500, ((1:10)*10)[ci_true])
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>% .$center %>% mean_var()
hist(scale(dat), breaks = 100)
ci_true <- sample(1:100, 500, replace = TRUE)
dat <- rnorm(500, ((1:100)*10)[ci_true])
data.frame(y = scale(dat), x = ci_true) %>%
group_by(x) %>%
summarise(center = mean(y)) %>% .$center %>% mean_var()
hist(scale(dat), breaks = 100)
set.seed(overall_seed)
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true], 2)
p1 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "2 separated clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true])
p2 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "3 separated clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
p3 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "4 separated clusters (Scaled Data)", x = "Data", y = "Density")
grid.arrange(p1, p2, p3)
set.seed(overall_seed)
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true], 3)
p1 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "2 separated clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true])
p2 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "3 separated clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
p3 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "4 separated clusters (Scaled Data)", x = "Data", y = "Density")
grid.arrange(p1, p2, p3)
set.seed(overall_seed)
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true], 3)
p1 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "2 clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true])
p2 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "3 separated clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
p3 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "4 separated clusters (Scaled Data)", x = "Data", y = "Density")
grid.arrange(p1, p2, p3, p3)
set.seed(overall_seed)
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true], 3)
p1 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "2 clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
p2 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "3 clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
p3 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "4 separated clusters (Scaled Data)", x = "Data", y = "Density")
grid.arrange(p1, p2, p3, p3)
set.seed(overall_seed)
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true], 3)
p1 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "2 clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 2)
p2 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "3 clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
p3 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "4 separated clusters (Scaled Data)", x = "Data", y = "Density")
grid.arrange(p1, p2, p3, p3)
set.seed(overall_seed)
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true], 3)
p1 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "2 clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
p2 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "3 clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
p3 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "4 separated clusters (Scaled Data)", x = "Data", y = "Density")
grid.arrange(p1, p2, p3, p3)
set.seed(overall_seed)
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true], 3)
p1 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "2 clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
p2 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "3 clusters (Scaled Data)", x = "Data", y = "Density")
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true], 3)
p3 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "4 clusters (Scaled Data)", x = "Data", y = "Density")
grid.arrange(p1, p2, p3, p3)
set.seed(overall_seed)
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
p2 <- ggplot(data.frame(x = scale(dat), group = ci_true), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 50, alpha = 0.25) +
geom_density(linewidth = 0.75) +
theme_bw() +
labs(title = "3 clusters (Scaled Data)", x = "Data", y = "Density")
p2
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
result_model[[1]]
table(result_model[[1]]$clus_assign)
table(result_model[[1]]$clus_assign, result_model[[2]]$clus_assign)
table(result_model[[1]]$clus_assign, result_model[[1]]$ci_true)
table(result_model[[2]]$clus_assign, result_model[[2]]$ci_true)
result_model[[2]]$n_cluster
result_model[[3]]$n_cluster
table(result_model[[3]]$clus_assign, result_model[[3]]$ci_true)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(10, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(0.01, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(0.1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(10, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:3, 500, replace = TRUE)
dat <- rnorm(500, c(-10, 0, 10)[ci_true], 3)
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(10, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
