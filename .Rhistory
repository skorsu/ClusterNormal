split_or_merge = NA, result_status = NA), n_para)
### Hyperparameters
K <- hyper_set[i, "K"]
xi_vec <- rep(hyper_set[i, "xi"], K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(hyper_set[i, "as"], K)
b_sigma_vec <- rep(hyper_set[i, "bs"], K)
lambda_vec <- rep(hyper_set[i, "lambda"], K)
a_theta <- hyper_set[i, "at"]
b_theta <- hyper_set[i, "bt"]
sm_iter <- hyper_set[i, "iter"]
### Matrix for storing the final result
### result_mat <- data.frame(matrix(NA, ncol = 7, nrow = n_para))
### colnames(result_mat) <- c("Run Time", "Clusters", "Jaccard", "VI",
###                           "P(Merge|Accept)", "P(Split|Accept)", "P(Accept)")
### Loop through each data set
for(t in 1:n_para){
### Data for each parallel
list_store[[t]]$actual_clus <- list_data[[t]]$actual_clus
### clus_index <- list_data[[t]]$actual_clus
scaled_dat <- scale(list_data[[t]]$dat, center = centered, scale = FALSE)
start_time <- Sys.time()
result <- SFDM_model(alg_iter, K, ci_init, scaled_dat, mu0_vec, lambda_vec,
a_sigma_vec, b_sigma_vec, xi_vec, a_theta, b_theta,
sm_iter, 500)
run_time <- as.numeric(difftime(Sys.time(), start_time, units = "secs"))
list_store[[t]]$time <- run_time
list_store[[t]]$result <- result$iter_assign
list_store[[t]]$split_or_merge <- result$split_or_merge
list_store[[t]]$result_status <- result$sm_status
### clus_result <- as.numeric(salso(result$iter_assign[-(1:alg_burn_in), ],
###                                 maxNClusters = K))
### jacc_score <- mclustcomp(clus_index, clus_result, types = "jaccard")$scores
### vi_score <- mclustcomp(clus_index, clus_result, types = "vi")$scores
### result_status <- factor(result$sm_status)
### levels(result_status) <- c("Reject", "Accept")
### result_sm <- factor(result$split_or_merge)
### levels(result_sm) <- c("Merge", "Split")
### result_tab <- table(result_status, result_sm)
### prob_accept <- result_tab[2, ]/table(result_sm)
### result_mat[t, ] <- c(run_time, length(unique(clus_result)), jacc_score,
###                      vi_score, prob_accept, mean(result$sm_status))
}
return(list_store)
}
stopImplicitCluster()
print(Sys.time() - overall_start)
list_result
### Step 4: Save the result
list_result[[3]][[1]]$result
### Step 4: Save the result
salso(list_result[[3]][[1]]$result)
### Step 4: Save the result
list_result[[3]][[1]]
### Step 4: Save the result
list_result[[3]][[1]]$``
list(result = NA, time = NA, actual_clus = NA,
split_or_merge = NA, result_status = NA)
### Step 4: Save the result
list_result[[3]][[1]]$result_status
### Step 4: Save the result
table(list_result[[3]][[1]]$result_status)
### Step 4: Save the result
table(list_result[[3]][[1]]$split_or_merge)
### Step 4: Save the result
table(list_result[[3]][[1]]$result)
### Step 4: Save the result
table(list_result[[3]][[1]]$actual_clus)
### Step 4: Save the result
table(list_result[[3]][[1]]$time)
### Step 4: Save the result
table(list_result[[3]][[2]]$time)
### Step 4: Save the result
table(list_result[[3]][[2]]$result_status)
### Step 4: Save the result
table(list_result[[3]][[2]]$actual_clus)
### Step 4: Save the result
table(list_result[[3]][[2]]$time)
salso(list_result[[3]][[2]]$result)
table(salso(list_result[[3]][[2]]$result), list_result[[3]][[2]]$actual_clus)
### Step 4: Save the result
save(list_result, file = save_name_analysis)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rm(list = ls())
### Import the data
path <- "/Users/kevin-imac/Desktop/"
paste0(path, "sensitivity_4_center_FALSE")
load(paste0(path, "sensitivity_4_center_FALSE"))
load(paste0(path, "sensitivity_4_center_FALSE.RData"))
length(list_result)
length(list_result[[1]])
list_result[[1]]
list_result[[1]][[1]]
list_result[[1]][[15]]
list_result[[1]][[15]]
list_result[[1]][[20]]
list_result[[1]][[31]]
list_result[[1]][[30]]
### Libraries
library(salso)
list_result[[1]][[30]]$actual_clus
list_result[[1]][[20]]$actual_clus
list_result[[1]][[20]]$result_status
list_result[[1]][[20]]$result
list_result[[1]][[20]]$result[1:2, ]
for(i in 1:30){
ci_true <- list_result[[1]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:2000), ]))
table(ci_result, actual_clus)
}
for(i in 1:30){
ci_true <- list_result[[1]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:2000), ]))
table(ci_result, ci_true)
}
library(tidyverse)
for(i in 1:30){
ci_true <- list_result[[1]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:2000), ]))
table(ci_result, ci_true) %>% print()
}
mclustcomp()
library(mclustcomp)
### Setting
burn_in <- 2000
ci_true <- list_result[[1]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:burn_in), ]))
mclustcomp(ci_true, ci_result)
### Quantities
mclustcomp(ci_true, ci_result)[c(1, 5, 22),. ]
### Quantities
mclustcomp(ci_true, ci_result)[c(1, 5, 22), ]
result_mat <- matrix(NA, nrow = 30, ncol = 3)
result_mat <- matrix(NA, nrow = 30, ncol = 3)
colnames(result_mat) <- c("Adj Rand", "Jaccard", "VI")
for(i in 1:30){
ci_true <- list_result[[1]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:burn_in), ]))
result_mat[i, ] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
## table(ci_result, ci_true) %>% print()
}
result_mat
list_result[[1]][[i]]$time
result_mat <- matrix(NA, nrow = 30, ncol = 4)
colnames(result_mat) <- c("Time", "Adj Rand", "Jaccard", "VI")
for(i in 1:30){
ci_true <- list_result[[1]][[i]]$time
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:burn_in), ]))
result_mat[i, 1] <- list_result[[1]][[i]]$actual_clus
result_mat[i, 2:4] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
## table(ci_result, ci_true) %>% print()
}
rm(list = ls())
### Setting
burn_in <- 2000
### Import the data
path <- "/Users/kevin-imac/Desktop/"
load(paste0(path, "sensitivity_4_center_FALSE.RData"))
### Libraries
library(salso)
library(tidyverse)
library(mclustcomp)
result_mat <- matrix(NA, nrow = 30, ncol = 4)
colnames(result_mat) <- c("Time", "Adj Rand", "Jaccard", "VI")
for(i in 1:30){
ci_true <- list_result[[1]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:burn_in), ]))
result_mat[i, 1] <- list_result[[1]][[i]]$time
result_mat[i, 2:4] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
## table(ci_result, ci_true) %>% print()
}
result_mat
list_result[[1]][[i]]$split_or_merge
sm <- factor(list_result[[1]][[i]]$split_or_merge)
sm <- factor(list_result[[1]][[i]]$split_or_merge)
levels(sm)
levels(sm) <- c("Merge", "Split")
sm
status <- factor(list_result[[1]][[i]]$result_status)
levels(status)
sm <- factor(list_result[[1]][[i]]$split_or_merge)
levels(sm) <- c("Merge", "Split")
status <- factor(list_result[[1]][[i]]$result_status)
levels(status) <- c("Reject", "Accept")
table(sm, status)
557 + 195
195/752
table(sm, status)
table(sm, status)[, 2]
table(sm)
table(sm, status)[, 2]/table(sm)
mean(list_result[[1]][[i]]$result_status)
result_mat <- matrix(NA, nrow = 30, ncol = 7)
colnames(result_mat) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)")
for(i in 1:30){
ci_true <- list_result[[1]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:burn_in), ]))
result_mat[i, 1] <- list_result[[1]][[i]]$time
result_mat[i, 2:4] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
result_mat[i, 5] <- mean(list_result[[1]][[i]]$result_status)
sm <- factor(list_result[[1]][[i]]$split_or_merge)
levels(sm) <- c("Merge", "Split")
status <- factor(list_result[[1]][[i]]$result_status)
levels(status) <- c("Reject", "Accept")
result_mat[i, 6:7] <- table(sm, status)[, 2]/table(sm)
}
result_mat
result_mat <- matrix(NA, nrow = 30, ncol = 8)
colnames(result_mat) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
for(i in 1:30){
ci_true <- list_result[[1]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:burn_in), ]))
result_mat[i, 1] <- list_result[[1]][[i]]$time
result_mat[i, 2:4] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
result_mat[i, 5] <- mean(list_result[[1]][[i]]$result_status)
sm <- factor(list_result[[1]][[i]]$split_or_merge)
levels(sm) <- c("Merge", "Split")
status <- factor(list_result[[1]][[i]]$result_status)
levels(status) <- c("Reject", "Accept")
result_mat[i, 6:7] <- table(sm, status)[, 2]/table(sm)
result[i, 8] <- length(unique(ci_result))
}
result_mat <- matrix(NA, nrow = 30, ncol = 8)
colnames(result_mat) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
for(i in 1:30){
ci_true <- list_result[[1]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[1]][[i]]$result[-(1:burn_in), ]))
result_mat[i, 1] <- list_result[[1]][[i]]$time
result_mat[i, 2:4] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
result_mat[i, 5] <- mean(list_result[[1]][[i]]$result_status)
sm <- factor(list_result[[1]][[i]]$split_or_merge)
levels(sm) <- c("Merge", "Split")
status <- factor(list_result[[1]][[i]]$result_status)
levels(status) <- c("Reject", "Accept")
result_mat[i, 6:7] <- table(sm, status)[, 2]/table(sm)
result_mat[i, 8] <- length(unique(ci_result))
}
result_mat
registerDoParallel(detectCores() - 1)
foreach(c = 1:15) %dopar%{
result_mat <- matrix(NA, nrow = 30, ncol = 8)
colnames(result_mat) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
for(i in 1:30){
ci_true <- list_result[[c]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[c]][[i]]$result[-(1:burn_in), ]))
result_mat[i, 1] <- list_result[[c]][[i]]$time
result_mat[i, 2:4] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
result_mat[i, 5] <- mean(list_result[[c]][[i]]$result_status)
sm <- factor(list_result[[c]][[i]]$split_or_merge)
levels(sm) <- c("Merge", "Split")
status <- factor(list_result[[c]][[i]]$result_status)
levels(status) <- c("Reject", "Accept")
result_mat[i, 6:7] <- table(sm, status)[, 2]/table(sm)
result_mat[i, 8] <- length(unique(ci_result))
}
}
stopImplicitCluster()
rm(list = ls())
### Setting
burn_in <- 2000
### Import the data
path <- "/Users/kevin-imac/Desktop/"
load(paste0(path, "sensitivity_4_center_FALSE.RData"))
### Libraries
library(salso)
library(tidyverse)
library(mclustcomp)
library(foreach)
library(doParallel)
start_collect <- Sys.time()
registerDoParallel(detectCores() - 1)
result_list <- foreach(c = 1:15) %dopar%{
result_mat <- matrix(NA, nrow = 30, ncol = 8)
colnames(result_mat) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
for(i in 1:30){
ci_true <- list_result[[c]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[c]][[i]]$result[-(1:burn_in), ]))
result_mat[i, 1] <- list_result[[c]][[i]]$time
result_mat[i, 2:4] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
result_mat[i, 5] <- mean(list_result[[c]][[i]]$result_status)
sm <- factor(list_result[[c]][[i]]$split_or_merge)
levels(sm) <- c("Merge", "Split")
status <- factor(list_result[[c]][[i]]$result_status)
levels(status) <- c("Reject", "Accept")
result_mat[i, 6:7] <- table(sm, status)[, 2]/table(sm)
result_mat[i, 8] <- length(unique(ci_result))
}
return(result_mat)
}
stopImplicitCluster()
print(Sys.time() - start_collect)
result_list
### Function: Summary Quantities "Mean (SD)".
bal_quan <- function(num_vec, rounding = 4){
mean_val <- round(mean(num_vec), 4)
sd_val <- round(sd(num_vec), 4)
paste0(mean_val, " (", sd_val, ")")
}
### User-defined function
### Function: Summary Quantities "Mean (SD)".
bal_quan <- function(num_vec, rounding = 4){
mean_val <- round(mean(num_vec), 4)
sd_val <- round(sd(num_vec), 4)
paste0(mean_val, " (", sd_val, ")")
}
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 8))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
colnames(result) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
xtable(result)
}
sum_tab(result_list)
### User-defined function
### Function: Summary Quantities "Mean (SD)".
bal_quan <- function(num_vec, rounding = 4){
mean_val <- round(mean(num_vec), 4)
sd_val <- round(sd(num_vec), 4)
paste0(mean_val, " (", sd_val, ")")
}
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 8))
for(i in 1:15){
result[i, ] <- apply(res_list[[i]], 2, bal_quan, rounding = rr)
}
colnames(result) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
xtable(result)
}
sum_tab(result_list)
library(ggplot2)
n_unique <- function(cvec){
length(unique(cvec))
}
list_result[[1]][[i]]$result
apply(list_result[[1]][[1]]$result)
list_result[[1]][[1]]$result
apply(list_result[[1]][[1]]$result, 1, n_unique)
unique_clus <- matrix(NA, nrow = 30, ncol = 3000)
unique_clus <- matrix(NA, nrow = 30, ncol = 3000)
for(i in 1:30){
unique_clus[i, ] <- apply(list_result[[1]][[i]]$result, 1, n_unique)
}
unique_clus
plot(unique_clus[1, ])
plot(unique_clus[1, ], type = "l")
t(unique_clus)
data.frame(t(unique_clus))
data.frame(iter = 1:3000, t(unique_clus))
data.frame(iter = 1:3000, t(unique_clus)) %>%
ggplot(aes(x = iter, y = X1)) +
geom_line()
data.frame(iter = 1:3000, t(unique_clus)) %>%
ggplot(aes(x = iter)) +
geom_line(aes(y = X1)) +
geom_line(aes(y = X1)) +
geom_line(aes(y = X1)) +
geom_line(aes(y = X1)) +
plot(unique_clus[1, ], type = "l")
data.frame(iter = 1:3000, t(unique_clus)) %>%
ggplot(aes(x = iter)) +
geom_line(aes(y = X1)) +
geom_line(aes(y = X2)) +
geom_line(aes(y = X3)) +
geom_line(aes(y = X4)) +
theme_bw()
rm(list = ls())
rm(list = ls())
### Setting
burn_in <- 2000
### Import the data
path <- "/Users/kevin-imac/Desktop/"
load(paste0(path, "sensitivity_4_center_TRUE.RData"))
### Libraries
library(salso)
library(tidyverse)
library(mclustcomp)
library(ggplot2)
library(foreach)
library(doParallel)
### User-defined function
### Function: Calculate the unique number of active cluster
n_unique <- function(cvec){
length(unique(cvec))
}
### Function: Summary Quantities "Mean (SD)".
bal_quan <- function(num_vec, rounding = 4){
mean_val <- round(mean(num_vec), 4)
sd_val <- round(sd(num_vec), 4)
paste0(mean_val, " (", sd_val, ")")
}
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 8))
for(i in 1:15){
result[i, ] <- apply(res_list[[i]], 2, bal_quan, rounding = rr)
}
colnames(result) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
xtable(result)
}
start_collect <- Sys.time()
registerDoParallel(detectCores() - 1)
result_list <- foreach(c = 1:15) %dopar%{
result_mat <- matrix(NA, nrow = 30, ncol = 8)
colnames(result_mat) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
for(i in 1:30){
ci_true <- list_result[[c]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[c]][[i]]$result[-(1:burn_in), ]))
result_mat[i, 1] <- list_result[[c]][[i]]$time
result_mat[i, 2:4] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
result_mat[i, 5] <- mean(list_result[[c]][[i]]$result_status)
sm <- factor(list_result[[c]][[i]]$split_or_merge)
levels(sm) <- c("Merge", "Split")
status <- factor(list_result[[c]][[i]]$result_status)
levels(status) <- c("Reject", "Accept")
result_mat[i, 6:7] <- table(sm, status)[, 2]/table(sm)
result_mat[i, 8] <- length(unique(ci_result))
}
return(result_mat)
}
stopImplicitCluster()
print(Sys.time() - start_collect)
sum_tab(result_list)
### Plot for the assignment
unique_clus <- matrix(NA, nrow = 30, ncol = 3000)
for(i in 1:30){
unique_clus[i, ] <- apply(list_result[[1]][[i]]$result, 1, n_unique)
}
data.frame(iter = 1:3000, t(unique_clus)) %>%
ggplot(aes(x = iter)) +
geom_line(aes(y = X1)) +
geom_line(aes(y = X2)) +
geom_line(aes(y = X3)) +
geom_line(aes(y = X4)) +
theme_bw()
result_list[[9]]
list_result[[9]][[3]]
list_result[[9]][[3]]$split_or_merge
rm(list = ls())
### Setting
burn_in <- 2000
### Import the data
path <- "/Users/kevin-imac/Desktop/"
load(paste0(path, "sensitivity_2_center_TRUE.RData"))
### Libraries
library(salso)
library(tidyverse)
library(mclustcomp)
library(ggplot2)
library(foreach)
library(doParallel)
### User-defined function
### Function: Calculate the unique number of active cluster
n_unique <- function(cvec){
length(unique(cvec))
}
### Function: Summary Quantities "Mean (SD)".
bal_quan <- function(num_vec, rounding = 4){
mean_val <- round(mean(num_vec), 4)
sd_val <- round(sd(num_vec), 4)
paste0(mean_val, " (", sd_val, ")")
}
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 8))
for(i in 1:15){
result[i, ] <- apply(res_list[[i]], 2, bal_quan, rounding = rr)
}
colnames(result) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
xtable(result)
}
start_collect <- Sys.time()
registerDoParallel(detectCores() - 1)
result_list <- foreach(c = 1:15) %dopar%{
result_mat <- matrix(NA, nrow = 30, ncol = 8)
colnames(result_mat) <- c("Time", "Adj Rand", "Jaccard", "VI",
"P(Accept)", "P(Accept|Merge)", "P(Accept|Split)", "# Cluster")
for(i in 1:30){
ci_true <- list_result[[c]][[i]]$actual_clus
ci_result <- as.numeric(salso(list_result[[c]][[i]]$result[-(1:burn_in), ]))
result_mat[i, 1] <- list_result[[c]][[i]]$time
result_mat[i, 2:4] <- mclustcomp(ci_true, ci_result)[c(1, 5, 22), 2]
result_mat[i, 5] <- mean(list_result[[c]][[i]]$result_status)
sm <- factor(list_result[[c]][[i]]$split_or_merge)
levels(sm) <- c("Merge", "Split")
status <- factor(list_result[[c]][[i]]$result_status)
levels(status) <- c("Reject", "Accept")
result_mat[i, 6:7] <- table(sm, status)[, 2]/table(sm)
result_mat[i, 8] <- length(unique(ci_result))
}
return(result_mat)
}
stopImplicitCluster()
print(Sys.time() - start_collect)
sum_tab(result_list)
