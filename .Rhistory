s2_init <- c((1/rgamma(2, 1, 1)), rep(0, 3))
alpha_init <- c(rgamma(2, 1 ,1), rep(0, 3))
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
Rcpp::sourceCpp("src/main.cpp")
set.seed(31807)
ci_true <- rep(1:5, 1)
dat <- rnorm(5, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- c(0, 1, 0, 0, 0)
mu_init <- c(rnorm(2), rep(0, 3))
s2_init <- c((1/rgamma(2, 1, 1)), rep(0, 3))
alpha_init <- c(rgamma(2, 1 ,1), rep(0, 3))
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
Rcpp::sourceCpp("src/main.cpp")
set.seed(31807)
ci_true <- rep(1:5, 1)
dat <- rnorm(5, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- c(0, 1, 0, 0, 0)
mu_init <- c(rnorm(2), rep(0, 3))
s2_init <- c((1/rgamma(2, 1, 1)), rep(0, 3))
alpha_init <- c(rgamma(2, 1 ,1), rep(0, 3))
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
mu_init
s2_init
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
set.seed(31807)
ci_true <- rep(1:5, 1)
dat <- rnorm(5, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- c(0, 1, 0, 0, 0)
mu_init <- c(rnorm(2), rep(0, 3))
s2_init <- c((1/rgamma(2, 1, 1)), rep(0, 3))
alpha_init <- c(rgamma(2, 1 ,1), rep(0, 3))
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
test$log_A
test$log_A
Rcpp::sourceCpp("src/main.cpp")
set.seed(31807)
ci_true <- rep(1:5, 1)
dat <- rnorm(5, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- c(0, 1, 0, 0, 0)
mu_init <- c(rnorm(2), rep(0, 3))
s2_init <- c((1/rgamma(2, 1, 1)), rep(0, 3))
alpha_init <- c(rgamma(2, 1 ,1), rep(0, 3))
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
set.seed(31807)
ci_true <- rep(1:5, 3)
dat <- rnorm(5*3, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(0, 1, 0, 0, 0), 3)
mu_init <- c(rnorm(2), rep(0, 3))
s2_init <- c((1/rgamma(2, 1, 1)), rep(0, 3))
alpha_init <- c(rgamma(2, 1 ,1), rep(0, 3))
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
test$log_A
Rcpp::sourceCpp("src/main.cpp")
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
rep_log_A <- rep(NA, 5000)
for(i in 1:5000){
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
rep_log_A[i] <- test$log_A
}
hist(rep_log_A)
rm(list = ls())
### Required Libraries: --------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(mvtnorm)
library(tidyverse)
library(DirichletReg)
library(invgamma)
library(salso)
library(rootSolve)
library(metRology)
library(ggplot2)
library(gridExtra)
library(xtable)
library(mclustcomp)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
compileAttributes()
build()
install()
library(ClusterNormal)
set.seed(31807)
ci_true <- rep(1:5, 3)
dat <- rnorm(5*3, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(0, 1, 0, 0, 0), 3)
mu_init <- c(rnorm(2), rep(0, 3))
s2_init <- c((1/rgamma(2, 1, 1)), rep(0, 3))
alpha_init <- c(rgamma(2, 1 ,1), rep(0, 3))
test <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu_init = mu_init, s2_init = s2_init,
alpha_init = alpha_init, launch_iter = 10,
a_theta = 1, b_theta = 1)
test$log_A
test
### Required Libraries: --------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(mvtnorm)
library(tidyverse)
library(DirichletReg)
library(invgamma)
library(salso)
library(rootSolve)
library(metRology)
library(ggplot2)
library(gridExtra)
library(xtable)
library(mclustcomp)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(mclustcomp)
library(ClusterNormal)
library(salso)
library(foreach)
library(doParallel)
library(doRNG)
### Data Simulation: (1)
set.seed(1843)
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(10, 20, 30)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10000)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
### Data Simulation: (1)
set.seed(1843)
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(10, 20, 30)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
rm(list = ls())
### Data Simulation: (1)
set.seed(1843)
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(10, 20, 30)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 1000)
model_time <- Sys.time() - start_time
table(salso(test_result$iter_assign[-c(1:7500), ], maxNClusters = 10), ci_true)
par(mfrow = c(2, 2))
for(i in 1:10){
plot_name <- paste0("mu", i)
plot(test_result$iter_mu[, i], type = "l", xlab = "Iterations", ylab = "mu",
main = plot_name)
}
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rm(list = ls())
### Data Simulation: (1)
set.seed(1843)
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(10, 20, 30)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 1000)
model_time <- Sys.time() - start_time
model_time
table(salso(test_result$iter_assign[-c(1:7500), ], maxNClusters = 10), ci_true)
par(mfrow = c(2, 2))
for(i in 1:10){
plot_name <- paste0("mu", i)
plot(test_result$iter_mu[, i], type = "l", xlab = "Iterations", ylab = "mu",
main = plot_name)
}
par(mfrow = c(2, 2))
for(i in 1:10){
plot_name <- paste0("s2_", i)
plot(test_result$iter_s2[, i], type = "l", xlab = "Iterations", ylab = "s2",
main = plot_name)
}
ac <- factor(test_result$sm_status)
levels(ac) <- c("Reject", "Accept")
sm <- factor(test_result$split_or_merge)
levels(sm) <- c("Merge", "Split")
table(ac, sm)
rm(list = ls())
### Data Simulation: (1)
set.seed(1843)
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, -c(10, 20, 30)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 1000)
model_time <- Sys.time() - start_time
model_time
table(salso(test_result$iter_assign[-c(1:7500), ], maxNClusters = 10), ci_true)
par(mfrow = c(2, 2))
for(i in 1:10){
plot_name <- paste0("mu", i)
plot(test_result$iter_mu[, i], type = "l", xlab = "Iterations", ylab = "mu",
main = plot_name)
}
rm(list = ls())
### Data Simulation: (1)
set.seed(1843)
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(10, 20, 30)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 1000)
model_time <- Sys.time() - start_time
model_time
table(salso(test_result$iter_assign[-c(1:7500), ], maxNClusters = 10), ci_true)
test_result$log_A
is.nan(test_result$log_A)
sum(is.nan(test_result$log_A))
sum(is.infinite(test_result$log_A))
sum(is.nan(test_result$log_A))
sum(is.infinite(test_result$log_A))
test_result$iter_assign
apply(test_result$iter_assign, 1, mean)
apply(test_result$iter_assign, 1, function(x){length(unique(x))})
apply(test_result$iter_assign, 1, function(x){length(unique(x))}) %>%
plot()
apply(test_result$iter_assign, 1, function(x){length(unique(x))}) %>%
plot(type = "l")
n_active <- apply(test_result$iter_assign, 1, function(x){length(unique(x))})
quantile(n_active)
table(n_active)
n_active <- apply(test_result$iter_assign, 1, function(x){length(unique(x))})
table(n_active)
apply(test_result$iter_assign, 1, function(x){length(unique(x))}) %>%
plot(type = "l", ylim = c(1, 10))
mean(n_active)
c(mean(n_active), sd(n_active))
ac <- factor(test_result$sm_status)
levels(ac) <- c("Reject", "Accept")
sm <- factor(test_result$split_or_merge)
levels(sm) <- c("Merge", "Split")
table(ac, sm)
rm(list = ls())
### Data Simulation: (2)
set.seed(12441)
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE, prob = c(0.25, 0.35, 0.4))
dat_sim <- rnorm(N, c(7, 12, 17)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10000)
model_time <- Sys.time() - start_time
model_time
60 * 1.049174
table(salso(test_result$iter_assign[-c(1:7500), ], maxNClusters = 10), ci_true)
n_active <- apply(test_result$iter_assign, 1, function(x){length(unique(x))})
table(n_active)
apply(test_result$iter_assign, 1, function(x){length(unique(x))}) %>%
plot(type = "l", ylim = c(1, 10))
c(mean(n_active), sd(n_active))
ac <- factor(test_result$sm_status)
levels(ac) <- c("Reject", "Accept")
sm <- factor(test_result$split_or_merge)
levels(sm) <- c("Merge", "Split")
table(ac, sm)
ac <- factor(test_result$sm_status)
levels(ac) <- c("Reject", "Accept")
sm <- factor(test_result$split_or_merge)
levels(sm) <- c("Merge", "Split")
table(ac, sm)
rm(list = ls())
### Data Simulation: (3)
set.seed(12441)
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10000)
model_time <- Sys.time() - start_time
model_time
model_time
table(salso(test_result$iter_assign[-c(1:7500), ], maxNClusters = 10), ci_true)
n_active <- apply(test_result$iter_assign, 1, function(x){length(unique(x))})
table(n_active)
apply(test_result$iter_assign, 1, function(x){length(unique(x))}) %>%
plot(type = "l", ylim = c(1, 10))
c(mean(n_active), sd(n_active))
ac <- factor(test_result$sm_status)
levels(ac) <- c("Reject", "Accept")
sm <- factor(test_result$split_or_merge)
levels(sm) <- c("Merge", "Split")
table(ac, sm)
rm(list = ls())
### Data Simulation: (4)
set.seed(12441)
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, (c(0, 7.5, 15, 25, 35)[actual_clus])/2, 1)
rm(list = ls())
### Data Simulation: (4)
set.seed(12441)
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, (c(0, 7.5, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10000)
model_time <- Sys.time() - start_time
model_time
table(salso(test_result$iter_assign[-c(1:7500), ], maxNClusters = 10), ci_true)
n_active <- apply(test_result$iter_assign, 1, function(x){length(unique(x))})
table(n_active)
apply(test_result$iter_assign, 1, function(x){length(unique(x))}) %>%
plot(type = "l", ylim = c(1, 10))
c(mean(n_active), sd(n_active))
ac <- factor(test_result$sm_status)
levels(ac) <- c("Reject", "Accept")
sm <- factor(test_result$split_or_merge)
levels(sm) <- c("Merge", "Split")
table(ac, sm)
