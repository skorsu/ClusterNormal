a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10000, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
### Required Libraries: --------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(mvtnorm)
library(tidyverse)
library(DirichletReg)
library(salso)
library(rootSolve)
library(metRology)
library(ggplot2)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10000, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, (c(-3, -1, 1, 3)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, (c(-3, -1, 1, 3)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, (c(-3, -1, 1, 3)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, (c(-3, -1, 1, 3)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1, 500)
K <- 10
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1000, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
### Required Libraries: --------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(mvtnorm)
library(tidyverse)
library(DirichletReg)
library(salso)
library(rootSolve)
library(metRology)
library(ggplot2)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
set.seed(43)
## c(-20, -10, 0, 10, 20)/2
## c(0, 7.5, 15, 25, 35)/2
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, (c(-3, -1, 1, 3)[ci_true])/2, 1)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, group = x)) +
geom_density()
hist(dat, breaks = 100)
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
clus_init <- rep(1:500, 1)
K <- 500
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1000, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
model <- SFDM_model(1000, K, clus_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(model$iter_assign[-c(1:500), ]), ci_true)
### Required Libraries: --------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(mvtnorm)
library(tidyverse)
library(DirichletReg)
library(salso)
library(rootSolve)
library(metRology)
library(ggplot2)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
### User-defined functions
### Function: Simulating the data based on the scenario
f_data_sim <- function(sim_seed, scenario_index){
### place for storing result.
actual_clus <- NULL
dat <- NULL
set.seed(sim_seed)
if(! scenario_index %in% 1:4){
warning("invalid scenario. we have only 4 scenarios")
} else {
if(scenario_index == 1){
actual_clus <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[actual_clus])
} else if(scenario_index == 2){
actual_clus <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(-20, -10, 0, 10, 20)/2)[actual_clus])
} else if(scenario_index == 3){
actual_clus <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[actual_clus], 3)
} else {
actual_clus <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35)/2)[actual_clus])
}
}
### return the simulated data
result <- data.frame(actual_clus, dat)
return(result)
}
f_data_sim(1, 1)
f_data_sim(1, 2)
f_data_sim(1, 3)
f_data_sim(1, 4)
f_data_sim(1, 5)
rm(list = ls())
### FIX ME: --------------------------------------------------------------------
overall_seed <- 30184
n_para <- 30
scenario_now <- 1 ## Scenario
save_path <- NULL ## The location where we will save the result
save_name <- paste0("sensitivity_", scenario_now, ".RData") ## Result file
###: ---------------------------------------------------------------------------
### Required Packages: ---------------------------------------------------------
library(salso)
library(ggplot2)
library(ClusterNormal)
library(tidyverse)
library(mclustcomp)
library(foreach)
library(doParallel)
library(doRNG)
###: ---------------------------------------------------------------------------
### User-defined functions: ----------------------------------------------------
### Function: Simulating the data based on the scenario
f_data_sim <- function(sim_seed, scenario_index){
### place for storing result.
actual_clus <- NULL
dat <- NULL
set.seed(sim_seed)
if(! scenario_index %in% 1:4){
warning("invalid scenario. we have only 4 scenarios")
} else {
if(scenario_index == 1){
actual_clus <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[actual_clus])
} else if(scenario_index == 2){
actual_clus <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(-20, -10, 0, 10, 20)/2)[actual_clus])
} else if(scenario_index == 3){
actual_clus <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[actual_clus], 3)
} else {
actual_clus <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35)/2)[actual_clus])
}
}
### return the simulated data
result <- data.frame(actual_clus, dat)
return(result)
}
###: ---------------------------------------------------------------------------
### Sensitivity Analysis: ------------------------------------------------------
### Updated 3/18/2023: Perform a sensitivity analysis for all four scenarios.
### Step 1: Simulate the data based on the scenarios
### Using the "f_data_sim" function.
### Simulate the data for paralleled
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
list_data <- foreach(i = 1:n_para) %dorng%{
return(f_data_sim(overall_seed + i, scenario_now))
}
stopImplicitCluster()
list_data
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
list_data_2 <- foreach(i = 1:n_para) %dorng%{
return(f_data_sim(overall_seed + i, scenario_now))
}
stopImplicitCluster()
list_data_2
list_data == list_data_2
identical(list_data, list_data_2)
save_name
