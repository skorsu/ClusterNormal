p2 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 5 separated clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 2, TRUE)
p3 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 3: 2 mixing clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 5, TRUE)
p4 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 3: 5 mixing clusters", x = "Data", y = "Density")
grid.arrange(p1, p2, p3, p4)
### Plot
dat <- f_data_sim(1, 2, FALSE)
p1 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 2 separated clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 5, FALSE)
p2 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 2: 5 separated clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 2, TRUE)
p3 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 3: 2 mixing clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 5, TRUE)
p4 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 4: 5 mixing clusters", x = "Data", y = "Density")
grid.arrange(p1, p2, p3, p4)
bal_quan <- function(num_vec, rounding = 4){
mean_val <- round(mean(num_vec), 4)
sd_val <- round(sd(num_vec), 4)
paste0(mean_val, " (", sd_val, ")")
}
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
paste0(result_source, file_prefix)
paste0(result_source, file_prefix, "1", ".RData")
load(paste0(result_source, file_prefix, "1", ".RData"))
list_result
list_result[[1]]
apply(list_result[[1]], 2, bal_quan)
dim(list_result)
str(list_result)
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 6))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
}
sum_tab(list_result)
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 6))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
result
}
sum_tab(list_result)
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 6))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
result <- result[, -c(4:5)]
colnames(result) <- c("Time", "Jaccard", "VI", "P(Accept)")
result
}
sum_tab(list_result)
xtable(sum_tab(list_result))
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 6))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
result <- result[, -c(4:5)]
colnames(result) <- c("Time", "Jaccard", "VI", "P(Accept)")
xtable(result)
}
sum_tab(list_result)
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
load(paste0(result_source, file_prefix, "2", ".RData"))
sum_tab(list_result)
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
load(paste0(result_source, file_prefix, "3", ".RData"))
sum_tab(list_result)
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
load(paste0(result_source, file_prefix, "4", ".RData"))
sum_tab(list_result)
rm(list = ls())
### Required Packages
library(ggplot2)
library(gridExtra)
library(xtable)
library(tidyverse)
### User-defined functions
### Function: Simulating the data based on the scenario
f_data_sim <- function(sim_seed, actual_K, overlap){
### place for storing result.
actual_clus <- NULL
dat <- NULL
### simulate the data
set.seed(sim_seed)
if(actual_K == 2){ ### Scenario 1 and 3
actual_clus <- rep(1:2, 250)[sample(1:500)]
if(overlap == FALSE){
## Scenario 1
print("Scenario 1")
dat <- rnorm(500, c(5, -5)[actual_clus], 1)
} else {
### Scenario 3
print("Scenario 3")
dat <- rnorm(500, c(5, -5)[actual_clus], 3)
}
} else if(actual_K == 5){ ### Scenario 2 and 4
actual_clus <- rep(1:5, 100)[sample(1:500)]
if(overlap == FALSE){
## Scenario 2
print("Scenario 2")
dat <- rnorm(500, c(-100, -50, -20, 50, 100)[actual_clus], 1)
} else {
### Scenario 4
print("Scenario 4")
dat <- rnorm(500, c(-10, -5, 0, 20, 40)[actual_clus],
c(1.5, 1.5, 1.5, 3, 3)[actual_clus])
}
} else {
warning("invalid values of the actual clusters. (actual_K)")
}
### return the simulated data
result <- data.frame(actual_clus, dat)
return(result)
}
dat <- f_data_sim(1, 2, FALSE)
p1 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 2 separated clusters", x = "Data", y = "Density") +
theme(axis.title = element_text(size = 20))
p1
dat <- f_data_sim(1, 2, FALSE)
p1 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 2 separated clusters", x = "Data", y = "Density") +
theme(axis.title = element_text(size = 20),
plot.title = element_text(size = 36))
p1
dat <- f_data_sim(1, 2, FALSE)
p1 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 2 separated clusters", x = "Data", y = "Density") +
theme(axis.text = element_text(size = 16),
axis.title = element_text(size = 20),
plot.title = element_text(size = 36))
p1
dat <- f_data_sim(1, 2, FALSE)
p1 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 2 separated clusters", x = "Data", y = "Density") +
theme(axis.text = element_text(size = 16),
axis.title = element_text(size = 20),
plot.title = element_text(size = 28))
p1
### Plot
dat <- f_data_sim(1, 2, FALSE)
p1 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 2 separated clusters", x = "Data", y = "Density") +
theme(axis.text = element_text(size = 16),
axis.title = element_text(size = 20),
plot.title = element_text(size = 28))
dat <- f_data_sim(1, 5, FALSE)
p2 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 2: 5 separated clusters", x = "Data", y = "Density") +
theme(axis.text = element_text(size = 16),
axis.title = element_text(size = 20),
plot.title = element_text(size = 28))
dat <- f_data_sim(1, 2, TRUE)
p3 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 3: 2 mixing clusters", x = "Data", y = "Density") +
theme(axis.text = element_text(size = 16),
axis.title = element_text(size = 20),
plot.title = element_text(size = 28))
dat <- f_data_sim(1, 5, TRUE)
p4 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 4: 5 mixing clusters", x = "Data", y = "Density") +
theme(axis.text = element_text(size = 16),
axis.title = element_text(size = 20),
plot.title = element_text(size = 28))
grid.arrange(p1, p2, p3, p4)
rm(list = ls())
### Required Packages
library(ggplot2)
library(gridExtra)
library(xtable)
library(tidyverse)
### User-defined functions
### Function: Simulating the data based on the scenario
f_data_sim <- function(sim_seed, actual_K, overlap){
### place for storing result.
actual_clus <- NULL
dat <- NULL
### simulate the data
set.seed(sim_seed)
if(actual_K == 2){ ### Scenario 1 and 3
actual_clus <- rep(1:2, 250)[sample(1:500)]
if(overlap == FALSE){
## Scenario 1
print("Scenario 1")
dat <- rnorm(500, c(5, -5)[actual_clus], 1)
} else {
### Scenario 3
print("Scenario 3")
dat <- rnorm(500, c(5, -5)[actual_clus], 3)
}
} else if(actual_K == 5){ ### Scenario 2 and 4
actual_clus <- rep(1:5, 100)[sample(1:500)]
if(overlap == FALSE){
## Scenario 2
print("Scenario 2")
dat <- rnorm(500, c(-100, -50, 0, 50, 100)[actual_clus], 1)
} else {
### Scenario 4
print("Scenario 4")
dat <- rnorm(500, c(-10, -5, 0, 20, 40)[actual_clus],
c(1.5, 1.5, 1.5, 3, 3)[actual_clus])
}
} else {
warning("invalid values of the actual clusters. (actual_K)")
}
### return the simulated data
result <- data.frame(actual_clus, dat)
return(result)
}
### Function: Summary Quantities "Mean (SD)".
bal_quan <- function(num_vec, rounding = 4){
mean_val <- round(mean(num_vec), 4)
sd_val <- round(sd(num_vec), 4)
paste0(mean_val, " (", sd_val, ")")
}
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 6))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
result <- result[, -c(4:5)]
colnames(result) <- c("Time", "Jaccard", "VI", "P(Accept)")
xtable(result)
}
### Direction for the result file
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
load(paste0(result_source, file_prefix, "4", ".RData"))
sum_tab(list_result)
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
load(paste0(result_source, file_prefix, "2", ".RData"))
sum_tab(list_result)
dat <- rnorm(500, c(-100, -50, 0, 50, 100), 1)
dat
scale(dat)
var(scale(dat))
mean(scale(dat))
dat <- rnorm(500, c(-100, -50, 0, 50, 100), 1)
var(scale(dat))
mean(scale(dat))
K <- 10
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
result <- SFDM_model(1000, K, ci_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
library(ClusterNormal)
dat <- rnorm(500, c(-100, -50, 0, 50, 100), 1)
var(scale(dat))
mean(scale(dat))
K <- 10
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
result <- SFDM_model(1000, K, ci_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
salso(result$iter_assign[-(1:500), ])
library(salso)
salso(result$iter_assign[-(1:500), ])
table(salso(result$iter_assign[-(1:500), ]))
table(salso(result$iter_assign[-(1:500), ]), rep(1:5, 100))
K <- 10
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(1)
result <- SFDM_model(1000, K, ci_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(result$iter_assign[-(1:500), ]), rep(1:5, 100))
K <- 10
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(1)
result <- SFDM_model(1000, K, ci_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(result$iter_assign[-(1:500), ]), rep(1:5, 100))
sample(rnorm(500, c(-100, -50, 0, 50, 100), 1))
set.seed(1)
dat <- sample(rnorm(500, c(-100, -50, 0, 50, 100), 1))
var(scale(dat))
mean(scale(dat))
K <- 10
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(1)
result <- SFDM_model(1000, K, ci_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(result$iter_assign[-(1:500), ]))
set.seed(1)
dat <- sample(rnorm(500, c(-100, -50, 0, 50, 100), 1))
var(scale(dat))
mean(scale(dat))
K <- 10
ci_init <- rep(1, 500)
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(1)
result <- SFDM_model(1000, K, ci_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(result$iter_assign[-(1:500), ]))
set.seed(1)
dat <- sample(rnorm(500, c(-100, -50, 0, 50, 100), 1))
var(scale(dat))
mean(scale(dat))
K <- 10
ci_init <- rep(1, 500)
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(1)
result <- SFDM_model(1000, K, ci_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(result$iter_assign[-(1:500), ]))
set.seed(1)
dat <- sample(rnorm(500, c(-100, -50, 0, 50, 100), 1))
var(scale(dat))
mean(scale(dat))
K <- 10
ci_init <- rep(1, 500)
xi_vec <- rep(0.1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(1)
result <- SFDM_model(1000, K, ci_init, xi_vec, scale(dat), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(salso(result$iter_assign[-(1:500), ]))
rm(list = ls())
### Required Packages
library(salso)
library(ggplot2)
library(ClusterNormal)
library(tidyverse)
library(mclustcomp)
library(foreach)
library(doParallel)
library(doRNG)
### User-defined functions
### Function: Simulating the data based on the scenario
f_data_sim <- function(sim_seed, actual_K, overlap){
### place for storing result.
actual_clus <- NULL
dat <- NULL
### simulate the data
set.seed(sim_seed)
if(actual_K == 2){ ### Scenario 1 and 3
actual_clus <- rep(1:2, 250)[sample(1:500)]
if(overlap == FALSE){
## Scenario 1
print("Scenario 1")
dat <- rnorm(500, c(5, -5)[actual_clus], 1)
} else {
### Scenario 3
print("Scenario 3")
dat <- rnorm(500, c(5, -5)[actual_clus], 3)
}
} else if(actual_K == 5){ ### Scenario 2 and 4
actual_clus <- rep(1:5, 100)[sample(1:500)]
if(overlap == FALSE){
## Scenario 2
print("Scenario 2")
dat <- rnorm(500, c(-100, -50, 0, 50, 100)[actual_clus], 1)
} else {
### Scenario 4
print("Scenario 4")
dat <- rnorm(500, c(-10, -5, 0, 20, 40)[actual_clus],
c(1.5, 1.5, 1.5, 3, 3)[actual_clus])
}
} else {
warning("invalid values of the actual clusters. (actual_K)")
}
### return the simulated data
result <- data.frame(actual_clus, dat)
return(result)
}
### Simulation Study
dat <- f_data_sim(23, 2, FALSE)
dat
install.packages("cluster")
library(cluster)
install.packages("factoextra")
library(factoextra)
fviz_nbclust(dat, kmeans, method = "gap_stat")
fviz_nbclust(dat, kmeans, method = "wss")
install.packages("NbClust")
library(NbClust)
NbClust(dat, distance = "euclidean", min.nc=2, max.nc=8, method = "complete", index = "ch")
NbClust(dat, distance = "euclidean", min.nc=2, max.nc=8, method = "kmeans", index = "ch")
NbClust(dat, distance = "euclidean", min.nc=2, max.nc=10, method = "kmeans", index = "ch")
fviz_nbclust(dat$dat, kmeans, method = "wss")
dat$dat
fviz_nbclust(data.frame(dat$dat), kmeans, method = "wss")
NbClust(dat$dat, distance = "euclidean", min.nc=2, max.nc=10, method = "kmeans", index = "ch")
NbClust(scale(dat$dat), distance = "euclidean", min.nc=2, max.nc=10, method = "kmeans", index = "ch")
NbClust(scale(dat$dat), distance = "euclidean", min.nc=2, max.nc=10, method = "kmeans", index = "silhouette")
### Simulation Study
dat <- f_data_sim(23, 2, TRUE)
NbClust(scale(dat$dat), distance = "euclidean", min.nc=2, max.nc=10, method = "kmeans", index = "silhouette")
mod_kmean <- NbClust(scale(dat$dat), distance = "euclidean", min.nc=2,
max.nc=10, method = "kmeans", index = "silhouette")
table(mod_kmean$Best.partition, dat$actual_clus)
dat <- f_data_sim(23, 5, TRUE)
fviz_nbclust(data.frame(dat$dat), kmeans, method = "wss")
mod_kmean <- NbClust(scale(dat$dat), distance = "euclidean", min.nc=2,
max.nc=10, method = "kmeans", index = "silhouette")
table(mod_kmean$Best.partition, dat$actual_clus)
