if (score < breaks[i+1]) {
grade <- grades[i] # found the grade the score belongs to
break  # exit the for-loop
}
}
grade
}
sapply(u, clus_index, cum_w)
clus_index <- 1:5
sapply(u, clus_index, cum_w)
sapply(u, letter_grade, cum_w, letter_grade)
cum_w <- cumsum(w)
cum_w
set.seed(31807)
n <- 500
u <- runif(n)
y <- rep(NA, n)
mu <- c(-5, 0, 7)
sigma <- c(1, 2, 3)
w <- c(0.2, 0.3, 0.5)
cum_w <- cumsum(w)
cum_w
data_gen <- function(u, cummu_weight, mu, sigma){
if(u < cummu_weight[1]){
y <- rnorm(1, mu[1], sigma[1])
} else if(u < cummu_weight[2]){
y <- rnorm(1, mu[2], sigma[2])
} else {
y <- rnorm(1, mu[3], sigma[3])
}
return(y)
}
data_gen <- function(u, cummu_weight, mu, sigma){
if(u < cummu_weight[1]){
y <- rnorm(1, mu[1], sigma[1])
ci <- 1
} else if(u < cummu_weight[2]){
y <- rnorm(1, mu[2], sigma[2])
ci <- 2
} else {
y <- rnorm(1, mu[3], sigma[3])
ci <- 3
}
return(c(y, ci))
}
data_gen(u[1], cum_w, mu, sigma)
?apply
apply(u, 1, data_gen, cummu_weight = cum_w, mu = mu, sigma = sigma)
apply(data.frame(u), 1, data_gen, cummu_weight = cum_w, mu = mu, sigma = sigma)
t(apply(data.frame(u), 1, data_gen, cummu_weight = cum_w, mu = mu, sigma = sigma))
### Data Simulation
set.seed(31807)
n <- 500
u <- runif(n)
y <- rep(NA, n)
mu <- c(-5, 0, 7)
sigma <- c(1, 2, 3)
w <- c(0.2, 0.3, 0.5)
cum_w <- cumsum(w)
data_gen <- function(u, cummu_weight, mu, sigma){
if(u < cummu_weight[1]){
y <- rnorm(1, mu[1], sigma[1])
ci <- 1
} else if(u < cummu_weight[2]){
y <- rnorm(1, mu[2], sigma[2])
ci <- 2
} else {
y <- rnorm(1, mu[3], sigma[3])
ci <- 3
}
return(c(y, ci))
}
data_sim <- t(apply(data.frame(u), 1, data_gen,
cummu_weight = cum_w, mu = mu, sigma = sigma))
data_sim
set.seed(31807)
n <- 500
u <- runif(n)
y <- rep(NA, n)
mu <- c(-5, 0, 7)
sigma <- c(1, 2, 3)
w <- c(0.2, 0.3, 0.5)
cum_w <- cumsum(w)
data_gen <- function(u, cummu_weight, mu, sigma){
if(u < cummu_weight[1]){
y <- rnorm(1, mu[1], sigma[1])
ci <- 1
} else if(u < cummu_weight[2]){
y <- rnorm(1, mu[2], sigma[2])
ci <- 2
} else {
y <- rnorm(1, mu[3], sigma[3])
ci <- 3
}
return(c(y, ci))
}
data_sim <- t(apply(data.frame(u), 1, data_gen,
cummu_weight = cum_w, mu = mu, sigma = sigma)) %>%
data.frame()
data_sim
View(data_sim)
ggplot(data = data_sim, aes(x = X1)) +
geom_boxplot() +
theme_bw()
ggplot(data = data_sim, aes(y = X1)) +
geom_boxplot() +
theme_bw()
ggplot(data = data_sim, aes(y = X1, group = X2)) +
geom_boxplot() +
theme_bw()
ggplot(data = data_sim, aes(y = X1, group = factor(X2))) +
geom_boxplot() +
theme_bw()
ggplot(data = data_sim, aes(y = X1, group = factor(X2))) +
geom_point() +
theme_bw()
ggplot(data = data_sim, aes(y = X1, x = factor(X2))) +
geom_point() +
theme_bw()
ggplot(data = data_sim, aes(y = X1, x = factor(X2))) +
geom_boxplot() +
theme_bw()
data_sim[, 1]
### Analysis
kmeans(data_sim[, 1])
?kmeans
### Analysis
kmeans(data_sim[, 1], 1)
### Analysis
kmeans(data_sim[, 1], 2)
### Analysis
kmeans(data_sim[, 1], 1)$tot.withinss
k_means_ss <- rep(NA, 10)
for(k in 1:10){
k_means_ss[k] <- kmeans(data_sim[, 1], k)$tot.withinss
}
data.frame(k = 1:10, k_means_ss) %>%
ggplot(aes(x = k, y = k_means_ss)) +
geom_point()
data.frame(k = 1:10, k_means_ss) %>%
ggplot(aes(x = k, y = k_means_ss)) +
geom_point() +
geom_line()
data.frame(k = 1:10, k_means_ss) %>%
ggplot(aes(x = k, y = k_means_ss)) +
geom_point() +
geom_line() +
theme_bw()
library(cluster)
?pam
#### PAM
pam(data_sim[, 1])
#### PAM
pam(data_sim[, 1], 1)
??fviz_nbclust
library(factoextra)
install.packages("factoextra")
install.packages("factoextra")
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(salso)
library(tidyverse)
library(ggplot2)
library(mvtnorm)
library(cluster)
library(factoextra)
library(ClusterNormal)
### Data Simulation
set.seed(31807)
n <- 500
u <- runif(n)
y <- rep(NA, n)
mu <- c(-5, 0, 7)
sigma <- c(1, 2, 3)
w <- c(0.2, 0.3, 0.5)
cum_w <- cumsum(w)
data_gen <- function(u, cummu_weight, mu, sigma){
if(u < cummu_weight[1]){
y <- rnorm(1, mu[1], sigma[1])
ci <- 1
} else if(u < cummu_weight[2]){
y <- rnorm(1, mu[2], sigma[2])
ci <- 2
} else {
y <- rnorm(1, mu[3], sigma[3])
ci <- 3
}
return(c(y, ci))
}
data_sim <- t(apply(data.frame(u), 1, data_gen,
cummu_weight = cum_w, mu = mu, sigma = sigma)) %>%
data.frame()
ggplot(data = data_sim, aes(y = X1, x = factor(X2))) +
geom_boxplot() +
theme_bw()
### Analysis
#### k-means
k_means_ss <- rep(NA, 10)
for(k in 1:10){
k_means_ss[k] <- kmeans(data_sim[, 1], k)$tot.withinss
}
data.frame(k = 1:10, k_means_ss) %>%
ggplot(aes(x = k, y = k_means_ss)) +
geom_point() +
geom_line() +
theme_bw()
#### PAM
?fviz_nbclust
#### PAM
fviz_nbclust(data_sim[, 1], pam, method = "wss")
?NbClust
#### PAM
fviz_nbclust(data.frame(data_sim[, 1]), pam, method = "wss")
#### PAM
fviz_nbclust(data.frame(data_sim[, 1]), pam, method = "wss") + theme_bw()
pam(data_sim[, 1], 1)
pam(data_sim[, 1], 10)
#### PAM
fviz_nbclust(data.frame(data_sim[, 1]), pam, method = "wss") + theme_bw()
#### PAM
fviz_nbclust(data.frame(data_sim[, 1]), pam, method = "wss") +
theme_bw() +
geom_point(data = data.frame(k = 1:10, k_means_ss),
aes(x = k, y = k_means_ss))
#### PAM
fviz_nbclust(data.frame(data_sim[, 1]), pam, method = "wss") +
theme_bw() +
geom_line(data = data.frame(k = 1:10, k_means_ss),
aes(x = k, y = k_means_ss))
#### PAM
fviz_nbclust(data.frame(data_sim[, 1]), pam, method = "wss") +
theme_bw()
1e-10
#### Our Method
data_sim
#### Our Method
data_sim %>%
group_by(X2) %>%
summarise(mean())
#### Our Method
data_sim %>%
group_by(X2) %>%
summarise(mean(X1))
#### Our Method
data_sim %>%
group_by(X2) %>%
summarise(x = mean(X1)) %>% .$x
mean(data_sim[, 1])
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
R
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
our_result <- normal_uni(10, 5, data_sim[, 1], rep(1, 10),
rep(mean(data_sim[, 1]), 10), rep(2, 10),
rep(0.2/(10*(R^2)), 10), rep(0.01, 10),
1, 1, 10, 110000, 5000)
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(10, 5, data_sim[, 1], rep(1, 10),
rep(mean(data_sim[, 1]), 10), rep(2, 10),
rep(0.2/(10*(R^2)), 10), rep(0.01, 10),
1, 1, 10, 10000, 5000)
Sys.time() - start_time
our_result
our_result[-(1:5000), ]
salso(our_result[-(1:5000), ])
ean(data_sim[, 1])
rep(mean(data_sim[, 1]), 10)
rep(0.2/(10*(R^2)), 10)
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(10, 5, data_sim[, 1], rep(1, 10),
rep(mean(data_sim[, 1]), 10), rep(2, 10),
rep(0.2/(10*(R^2)), 10), rep(1, 10),
10, 10, 10, 10000, 1000)
Sys.time() - start_time
salso(our_result[-(1:5000), ])
salso(our_result[-(1:5000), ])
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(10, 5, data_sim[, 1], rep(1, 10),
rep(0, 10), rep(2, 10),
rep(1, 10), rep(1, 10),
10, 10, 10, 10000, 1000)
Sys.time() - start_time
salso(our_result[-(1:5000), ])
data_sim[, 1]
data_sim[, 2]
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(10, 5, data_sim[, 2], rep(1, 10),
rep(0, 10), rep(2, 10),
rep(1, 10), rep(1, 10),
0.1, 0.1, 10, 10000, 1000)
Sys.time() - start_time
salso(our_result[-(1:5000), ])
data_sim[, 2]
our_result[-(1:5000), ]
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(10, 5, data_sim[, 2], rep(1, 10),
rep(2, 10), rep(1, 10),
rep(1, 10), rep(1, 10),
10, 10, 10, 10000, 1000)
Sys.time() - start_time
salso(our_result[-(1:5000), ])
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(10, 5, data_sim[, 1], rep(1, 10),
rep(2, 10), rep(1, 10),
rep(1, 10), rep(1, 10),
100, 100, 10, 10000, 1000)
Sys.time() - start_time
salso(our_result[-(1:5000), ])
#### EM
rgamma(10000, 10, 10)
#### EM
1/rgamma(10000, 10, 10)
#### EM
plot(1/rgamma(10000, 10, 10))
#### EM
hist(1/rgamma(10000, 10, 10))
#### EM
hist(1/rgamma(10000, 1, 1))
#### EM
hist(1/rgamma(10000, 0.1, 1))
#### EM
hist(1/rgamma(10000, 2, 1))
#### EM
hist(1/rgamma(10000, 2, 0.1))
#### EM
hist(1/rgamma(10000, 2, 0.001))
#### EM
hist(1/rgamma(10000, 10, 0.001))
#### EM
hist(1/rgamma(10000, 10, 10))
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(5, 3, data_sim[, 1], rep(10, 5),
rep(mean(data_sim[, 1]), 5), rep(10, 5),
rep(10, 5), rep(1, 5),
1, 1, 10, 10000, 1000)
Sys.time() - start_time
salso(our_result[-(1:5000), ])
mean(data_sim[, 1])
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(5, 3, data_sim[, 1], rep(10, 5),
rep(5, 5), rep(20, 5),
rep(20, 5), rep(0.01, 5),
1, 1, 10, 5000, 1000)
Sys.time() - start_time
salso(our_result[-(1:2500), ])
our_result[-(1:2500), ]
data_sim[, 1]
#### EM
hist(rgamma(1000, 100, 100))
#### EM
hist(1/rgamma(1000, 100, 100))
#### EM
hist(1/rgamma(1000, 0.5, 100))
#### EM
hist(1/rgamma(1000, 0.5, 0.5))
#### EM
hist(1/rgamma(1000, 1, 0.5))
#### EM
hist(1/rgamma(1000, 1, 1))
#### Our Method
R <- max(data_sim[, 1]) - min(data_sim[, 1])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(5, 3, data_sim[, 1], rep(10, 5),
rep(0, 5), rep(1, 5),
rep(1, 5), rep(0.01, 5),
1, 1, 10, 5000, 1000)
Sys.time() - start_time
salso(our_result[-(1:2500), ])
set.seed(20882)
start_time <- Sys.time()
our_result <- normal_uni(5, 3, data_sim[, 2], rep(10, 5),
rep(0, 5), rep(1, 5),
rep(1, 5), rep(0.01, 5),
1, 1, 10, 5000, 1000)
Sys.time() - start_time
salso(our_result[-(1:2500), ])
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(salso)
library(tidyverse)
library(ggplot2)
library(mvtnorm)
library(ClusterNormal)
rm(list = ls())
## Data Simulation
set.seed(20882)
data_test <- c(rnorm(50, -5, 1), rnorm(75, 10, 1))
data.frame(x = data_test, y = c(rep(1, 50), rep(2, 75))) %>%
ggplot(aes(x = x, fill = factor(y))) +
geom_histogram(bins = 30) +
theme_bw()
## Analysis
K <- 5
K_init <- 3
xi <- rep(1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
start_time <- Sys.time()
result <- normal_uni(K, K_init, data_test, xi, mu0_vec, a_sigma_vec,
b_sigma_vec, lambda_vec, 10, 10, 10, 10000, 1000)
Sys.time() - start_time
table(factor(c(rep(1, 50), rep(2, 75))), summary(salso(result[2001:5000, ]))$estimate)
data_test
rm(list = ls())
### Data Simulation
set.seed(31807)
n <- 500
u <- runif(n)
y <- rep(NA, n)
mu <- c(-5, 0, 7)
sigma <- c(1, 2, 3)
w <- c(0.2, 0.3, 0.5)
cum_w <- cumsum(w)
data_gen <- function(u, cummu_weight, mu, sigma){
if(u < cummu_weight[1]){
y <- rnorm(1, mu[1], sigma[1])
ci <- 1
} else if(u < cummu_weight[2]){
y <- rnorm(1, mu[2], sigma[2])
ci <- 2
} else {
y <- rnorm(1, mu[3], sigma[3])
ci <- 3
}
return(c(y, ci))
}
data_sim <- t(apply(data.frame(u), 1, data_gen,
cummu_weight = cum_w, mu = mu, sigma = sigma)) %>%
data.frame()
ggplot(data = data_sim, aes(y = X1, x = factor(X2))) +
geom_boxplot() +
theme_bw()
data_sim[, 1]
rm(list = ls())
## Data Simulation
set.seed(20882)
data_test <- c(rnorm(250, -5, 1), rnorm(250, 10, 1))
data.frame(x = data_test, y = c(rep(1, 250), rep(2, 250))) %>%
ggplot(aes(x = x, fill = factor(y))) +
geom_histogram(bins = 30) +
theme_bw()
## Analysis
K <- 5
K_init <- 3
xi <- rep(1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
start_time <- Sys.time()
result <- normal_uni(K, K_init, data_test, xi, mu0_vec, a_sigma_vec,
b_sigma_vec, lambda_vec, 10, 10, 10, 10000, 1000)
Sys.time() - start_time
table(factor(c(rep(1, 50), rep(2, 75))), summary(salso(result[2001:5000, ]))$estimate)
summary(salso(result[2001:5000, ]))$estimate
table(factor(c(rep(1, 250), rep(2, 250))), summary(salso(result[2001:5000, ]))$estimate)
rm(list = ls())
## Data Simulation
set.seed(20882)
data_test <- c(rnorm(250, -5, 1), rnorm(250, 10, 1))
data.frame(x = data_test, y = c(rep(1, 250), rep(2, 250))) %>%
ggplot(aes(x = x, fill = factor(y))) +
geom_histogram(bins = 30) +
theme_bw()
## Analysis
K <- 5
K_init <- 3
xi <- rep(1, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
start_time <- Sys.time()
result <- normal_uni(K, K_init, data_test, xi, mu0_vec, a_sigma_vec,
b_sigma_vec, lambda_vec, 1000, 2000, 10, 10000, 1000)
Sys.time() - start_time
table(factor(c(rep(1, 250), rep(2, 250))), summary(salso(result[2001:5000, ]))$estimate)
