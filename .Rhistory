mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- rgamma(5, 1, 1)
test <- SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, 50), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
test <- SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, 50), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
Rcpp::sourceCpp("src/main.cpp")
test <- SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, 50), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
data.frame(test$new_mu, test$new_s2, test$new_alpha)
Rcpp::sourceCpp("src/main.cpp")
set.seed(31807)
ci_true <- rep(1:5, 10)
dat <- rnorm(50, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(0:4), 10)
mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- rgamma(5, 1, 1)
test <- SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, 50), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
data.frame(test$new_mu, test$new_s2, test$new_alpha)
data.frame(mu_init, s2_init, alpha_init)
mean(dat)
var(dat)
set.seed(31807)
ci_true <- rep(1:5, 10)
dat <- rnorm(50, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(0:4), 10)
mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- rgamma(5, 1, 1)
data.frame(mu_init, s2_init, alpha_init)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, fill = factor(x))) +
geom_histogram(bins = 20) +
theme_bw()
test <- SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(1, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
data.frame(test$new_mu, test$new_s2, test$new_alpha)
table(ci_true, test$new_ci)
set.seed(31807)
ci_true <- rep(1:5, 10)
dat <- rnorm(50, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(0:4), 10)
mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- rgamma(5, 1, 1)
data.frame(mu_init, s2_init, alpha_init)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, fill = factor(x))) +
geom_histogram(bins = 20) +
theme_bw()
test <- SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(0, 2), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
data.frame(test$new_mu, test$new_s2, test$new_alpha)
table(ci_true, test$new_ci)
mu_init
data.frame(mu_init, s2_init, alpha_init)
set.seed(31807)
ci_true <- rep(1:5, 10)
dat <- rnorm(50, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(0:4), 10)
mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- rgamma(5, 1, 1)
data.frame(mu_init, s2_init, alpha_init)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, fill = factor(x))) +
geom_histogram(bins = 20) +
theme_bw()
test <- SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
data.frame(test$new_mu, test$new_s2, test$new_alpha)
table(ci_true, test$new_ci)
Rcpp::sourceCpp("src/main.cpp")
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
sp <- rep(NA, 1000){
sp <- rep(NA, 1000)
for(i in 1:1000){
sp[i] <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)$split_ind
}
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)$split_ind
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)$split_ind
Rcpp::sourceCpp("src/main.cpp")
sp <- rep(NA, 1000)
for(i in 1:1000){
sp[i] <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)$split_ind
}
Rcpp::sourceCpp("src/main.cpp")
sp <- rep(NA, 1000)
for(i in 1:1000){
sp[i] <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)$split_ind
}
Rcpp::sourceCpp("src/main.cpp")
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
sp <- rep(NA, 1000)
for(i in 1:1000){
sp[i] <- SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)$split_ind
}
mean(sp)
table(sp)
set.seed(31807)
ci_true <- rep(1:5, 10)
dat <- rnorm(50, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(2, 3), 25)
mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- c(0, 0, rgamma(2, 1, 1), 0)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
set.seed(31807)
ci_true <- rep(1:5, 10)
dat <- rnorm(50, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(2, 3), 25)
mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- c(0, 0, rgamma(2, 1, 1), 0)
data.frame(mu_init, s2_init, alpha_init)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_init = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
data.frame(mu_init, s2_init, alpha_init)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_init = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
data.frame(mu_init, s2_init, alpha_init)
Rcpp::sourceCpp("src/main.cpp")
set.seed(31807)
ci_true <- rep(1:5, 10)
dat <- rnorm(50, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(2, 3), 25)
mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- c(0, 0, rgamma(2, 1, 1), 0)
data.frame(mu_init, s2_init, alpha_init)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_init = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
Rcpp::sourceCpp("src/main.cpp")
SFDMM_rGibbs(dat, sm_clus = c(3, 4), a0 = 1, b0 = 1,
mu0 = 0, s20 = 100, xi0 = 1, rep(3:4, 25),
mu = mu_init, s2 = s2_init, 0:49)
### Required Libraries: --------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(mvtnorm)
library(tidyverse)
library(DirichletReg)
library(salso)
library(rootSolve)
library(metRology)
library(ggplot2)
library(gridExtra)
library(xtable)
library(mclustcomp)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
set.seed(31807)
ci_true <- rep(1:5, 10)
dat <- rnorm(50, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(2, 3), 25)
mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- c(0, 0, rgamma(2, 1, 1), 0)
data.frame(mu_init, s2_init, alpha_init)
ggplot(data.frame(x = ci_true, y = dat), aes(x = y, fill = factor(x))) +
geom_histogram(bins = 20) +
theme_bw()
SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_realloc(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(c(2, 3), 25), mu = mu_init, s2 = s2_init,
alpha_vec = alpha_init)
SFDMM_SM(dat, K_max = 5, a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = ci_init, mu = mu_init, s2 = s2_init,
alpha_init = alpha_init, launch_iter = 10, a_theta = 1, b_theta = 1)
SFDMM_rGibbs(dat, sm_clus = c(3, 4), a0 = 1, b0 = 1,
mu0 = 0, s20 = 100, xi0 = 1, rep(3:4, 25),
mu = mu_init, s2 = s2_init, 0:49)
Rcpp::sourceCpp("src/main.cpp")
Rcpp::sourceCpp("src/main.cpp")
set.seed(31807)
ci_true <- rep(1:5, 10)
dat <- rnorm(50, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ci_init <- rep(c(2, 3), 25)
mu_init <- rnorm(5, 0, sqrt(100))
s2_init <- 1/rgamma(5, 1, 1)
alpha_init <- c(0, 0, rgamma(2, 1, 1), 0)
test_result <- fmm_rcpp(iter = 10000, y = dat, K_max = 5,
a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(1, 50))
table(salso(test_result$assign_mat[-c(1:7500), ], maxNClusters = 5), ci_true)
plot(test_result$mu[-c(1:7500), 5], type = "l")
### Required Libraries: --------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(LaplacesDemon)
library(mvtnorm)
library(tidyverse)
library(DirichletReg)
library(salso)
library(rootSolve)
library(metRology)
library(ggplot2)
library(gridExtra)
library(xtable)
library(mclustcomp)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(bmixture)
library(mclustcomp)
library(ClusterNormal)
library(salso)
library(foreach)
library(doParallel)
library(doRNG)
### Data Simulation: (1)
set.seed(1843)
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(10, 20, 30)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
### Run the model: (1)
test_result <- fmm_rcpp(iter = 10000, y = dat_sim, K_max = K,
a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, N))
### salso result: (1)
table(salso(test_result$assign_mat[-c(1:7500), ], maxNClusters = K), ci_true)
apply(test_result$mu[-c(1:7500), ], 2, mean)
apply(test_result$sigma2[-c(1:7500), ], 2, mean)
plot(test_result$mu[-c(1:7500), 1], type = "l", ylim = c(7.5, 32.5),
col = "red", main = "mu", ylab = "mu", xlab = "iteration")
lines(1:2500, test_result$mu[-c(1:7500), 2], col = "blue")
lines(1:2500, test_result$mu[-c(1:7500), 3], col = "salmon")
plot(test_result$sigma2[-c(1:7500), 1], type = "l", ylim = c(0, 3),
col = "red", main = "s2", ylab = "s2", xlab = "iteration")
lines(1:2500, test_result$sigma2[-c(1:7500), 2], col = "blue")
lines(1:2500, test_result$sigma2[-c(1:7500), 3], col = "salmon")
set.seed(352)
registerDoParallel(detectCores() - 1)
list_result <- foreach(i = 1:10) %dorng%{
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(10, 20, 30)[ci_true], 1)
test_result <- fmm_rcpp(iter = 10000, y = dat_sim, K_max = K,
a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, N))
return(list(clus_assign = test_result$assign_mat, ci_true = ci_true))
}
stopImplicitCluster()
jac_vec <- rep(NA, 10)
for(i in 1:10){
ci_assign <- as.numeric(salso(list_result[[i]]$clus_assign[-c(1:7500), ],
maxNClusters = K))
jac_vec[i] <- mclustcomp(ci_assign, list_result[[i]]$ci_true, "jaccard")$score
}
mean(jac_vec)
sd(jac_vec)
### Data Simulation: (2)
set.seed(12441)
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE, prob = c(0.25, 0.35, 0.4))
dat_sim <- rnorm(N, c(7, 12, 17)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
### Run the model: (2)
test_result <- fmm_rcpp(iter = 10000, y = dat_sim, K_max = K,
a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, N))
### salso result: (2)
table(salso(test_result$assign_mat[-c(1:7500), ], maxNClusters = K), ci_true)
apply(test_result$mu[-c(1:7500), ], 2, mean)
apply(test_result$sigma2[-c(1:7500), ], 2, mean)
plot(test_result$mu[-c(1:7500), 1], type = "l", ylim = c(5, 20),
col = "red", main = "mu", ylab = "mu", xlab = "iteration")
lines(1:2500, test_result$mu[-c(1:7500), 2], col = "blue")
lines(1:2500, test_result$mu[-c(1:7500), 3], col = "salmon")
plot(test_result$sigma2[-c(1:7500), 1], type = "l", ylim = c(0, 3),
col = "red", main = "s2", ylab = "s2", xlab = "iteration")
lines(1:2500, test_result$sigma2[-c(1:7500), 2], col = "blue")
lines(1:2500, test_result$sigma2[-c(1:7500), 3], col = "salmon")
set.seed(352)
registerDoParallel(detectCores() - 1)
list_result <- foreach(i = 1:10) %dorng%{
N <- 500
K <- 3
ci_true <- sample(1:K, N, replace = TRUE, prob = c(0.25, 0.35, 0.4))
dat_sim <- rnorm(N, c(7, 12, 17)[ci_true], 1)
test_result <- fmm_rcpp(iter = 10000, y = dat_sim, K_max = K,
a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, N))
return(list(clus_assign = test_result$assign_mat, ci_true = ci_true))
}
stopImplicitCluster()
jac_vec <- rep(NA, 10)
for(i in 1:10){
ci_assign <- as.numeric(salso(list_result[[i]]$clus_assign[-c(1:7500), ],
maxNClusters = K))
jac_vec[i] <- mclustcomp(ci_assign, list_result[[i]]$ci_true, "jaccard")$score
}
mean(jac_vec)
sd(jac_vec)
### Data Simulation: (3)
set.seed(12441)
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
### Run the model: (3)
test_result <- fmm_rcpp(iter = 10000, y = dat_sim, K_max = K,
a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, N))
### salso result: (3)
table(salso(test_result$assign_mat[-c(1:7500), ], maxNClusters = K), ci_true)
plot(test_result$mu[-c(1:7500), 1], type = "l", ylim = c(-5, 50),
col = "red", main = "mu", ylab = "mu", xlab = "iteration")
lines(1:2500, test_result$mu[-c(1:7500), 2], col = "blue")
lines(1:2500, test_result$mu[-c(1:7500), 3], col = "salmon")
lines(1:2500, test_result$mu[-c(1:7500), 4], col = "green")
lines(1:2500, test_result$mu[-c(1:7500), 5], col = "grey")
plot(test_result$sigma2[-c(1:7500), 1], type = "l", ylim = c(0, 15),
col = "red", main = "s2", ylab = "s2", xlab = "iteration")
lines(1:2500, test_result$sigma2[-c(1:7500), 2], col = "blue")
lines(1:2500, test_result$sigma2[-c(1:7500), 3], col = "salmon")
lines(1:2500, test_result$sigma2[-c(1:7500), 4], col = "green")
lines(1:2500, test_result$sigma2[-c(1:7500), 5], col = "grey")
set.seed(352)
registerDoParallel(detectCores() - 1)
list_result <- foreach(i = 1:10) %dorng%{
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(0, 7.5, 15, 25, 35)[ci_true], 1)
test_result <- fmm_rcpp(iter = 10000, y = dat_sim, K_max = K,
a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, N))
return(list(clus_assign = test_result$assign_mat, ci_true = ci_true))
}
stopImplicitCluster()
jac_vec <- rep(NA, 10)
for(i in 1:10){
ci_assign <- as.numeric(salso(list_result[[i]]$clus_assign[-c(1:7500), ],
maxNClusters = K))
jac_vec[i] <- mclustcomp(ci_assign, list_result[[i]]$ci_true, "jaccard")$score
}
mean(jac_vec)
sd(jac_vec)
jac_vec
salso(list_result[[2]]$clus_assign[-c(1:9000), ],
maxNClusters = K)
table(salso(list_result[[2]]$clus_assign[-c(1:9000), ], maxNClusters = K),
list_result[[2]]$ci_true)
jac_vec <- rep(NA, 10)
for(i in 1:10){
ci_assign <- as.numeric(salso(list_result[[i]]$clus_assign[-c(1:9000), ],
maxNClusters = K))
jac_vec[i] <- mclustcomp(ci_assign, list_result[[i]]$ci_true, "jaccard")$score
}
mean(jac_vec)
sd(jac_vec)
jac_vec
table(salso(list_result[[2]]$clus_assign[-c(1:7500), ], maxNClusters = K),
list_result[[2]]$ci_true)
set.seed(352)
registerDoParallel(detectCores() - 1)
list_result <- foreach(i = 1:10) %dorng%{
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(0, 7.5, 15, 25, 35)[ci_true], 1)
test_result <- fmm_rcpp(iter = 10000, y = dat_sim, K_max = K,
a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, N))
return(list(clus_assign = test_result$assign_mat, ci_true = ci_true,
mu = test_result$mu))
}
stopImplicitCluster()
list_result
jac_vec <- rep(NA, 10)
for(i in 1:10){
ci_assign <- as.numeric(salso(list_result[[i]]$clus_assign[-c(1:7500), ],
maxNClusters = K))
jac_vec[i] <- mclustcomp(ci_assign, list_result[[i]]$ci_true, "jaccard")$score
}
mean(jac_vec)
sd(jac_vec)
jac_vec
table(salso(list_result[[2]]$clus_assign[-c(1:7500), ], maxNClusters = K),
list_result[[2]]$ci_true)
list_result[[2]]$mu
plot(list_result[[2]]$mu[, 1])
plot(list_result[[2]]$mu[, 1], type = "l")
plot(list_result[[2]]$mu[, 1], type = "l", ylim = c(-5, 50),
col = "red", main = "mu", ylab = "mu", xlab = "iteration")
lines(1:10000, list_result[[2]]$mu[, 2], col = "blue")
lines(1:10000, list_result[[2]]$mu[, 3], col = "salmon")
lines(1:10000, list_result[[2]]$mu[, 4], col = "green")
lines(1:10000, list_result[[2]]$mu[, 5], col = "grey")
plot(list_result[[2]]$mu[, 1], type = "l", ylim = c(-5, 50),
col = "red", main = "mu", ylab = "mu", xlab = "iteration")
lines(1:10000, list_result[[2]]$mu[, 2], col = "blue")
lines(1:10000, list_result[[2]]$mu[, 3], col = "salmon")
lines(1:10000, list_result[[2]]$mu[, 4], col = "green")
lines(1:10000, list_result[[2]]$mu[, 5], col = "grey")
abline(v = 7500)
plot(list_result[[2]]$mu[, 1], type = "l", ylim = c(-5, 50),
col = "red", main = "mu", ylab = "mu", xlab = "iteration")
lines(1:10000, list_result[[2]]$mu[, 2], col = "blue")
lines(1:10000, list_result[[2]]$mu[, 3], col = "salmon")
lines(1:10000, list_result[[2]]$mu[, 4], col = "green")
lines(1:10000, list_result[[2]]$mu[, 5], col = "grey")
abline(v = c(7500, 9000))
set.seed(352)
registerDoParallel(detectCores() - 1)
list_result <- foreach(i = 1:10) %dorng%{
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(0, 7.5, 15, 25, 35)[ci_true], 1)
test_result <- fmm_rcpp(iter = 15000, y = dat_sim, K_max = K,
a0 = 1, b0 = 1, mu0 = 0, s20 = 100, xi0 = 1,
ci_init = rep(0, N))
return(list(clus_assign = test_result$assign_mat, ci_true = ci_true,
mu = test_result$mu))
}
stopImplicitCluster()
plot(list_result[[2]]$mu[, 1], type = "l", ylim = c(-5, 50),
col = "red", main = "mu", ylab = "mu", xlab = "iteration")
lines(1:15000, list_result[[2]]$mu[, 2], col = "blue")
lines(1:15000, list_result[[2]]$mu[, 3], col = "salmon")
lines(1:15000, list_result[[2]]$mu[, 4], col = "green")
lines(1:15000, list_result[[2]]$mu[, 5], col = "grey")
abline(v = c(7500, 9000))
plot(list_result[[2]]$mu[, 1], type = "l", ylim = c(-5, 50),
col = "red", main = "mu", ylab = "mu", xlab = "iteration")
lines(1:15000, list_result[[2]]$mu[, 2], col = "blue")
lines(1:15000, list_result[[2]]$mu[, 3], col = "salmon")
lines(1:15000, list_result[[2]]$mu[, 4], col = "green")
lines(1:15000, list_result[[2]]$mu[, 5], col = "grey")
abline(v = 10000)
jac_vec <- rep(NA, 10)
for(i in 1:10){
ci_assign <- as.numeric(salso(list_result[[i]]$clus_assign[-c(1:10000), ],
maxNClusters = K))
jac_vec[i] <- mclustcomp(ci_assign, list_result[[i]]$ci_true, "jaccard")$score
}
mean(jac_vec)
sd(jac_vec)
