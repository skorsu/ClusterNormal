start_time <- Sys.time()
result1 <- our_model(iter, K, ci_init, xi_vec, scale(data_sim_1), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_1, salso(result1$iter_assign[-(1:1000), ], maxNClusters = K))
plot(1:iter, apply(result1$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
result_status <- factor(result1$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result1$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
c(5, 10)
c(3, 1) * c(5, 10)
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rm(list = ls())
set.seed(2)
K <- 7
n <- 20
xi_vec <- rep(1, K)
ci_vec <- sample(1:3, n, TRUE)
dat <- rnorm(n, c(-5, 10, 25)[ci_vec])
mu0_vec <- rep(1, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
old_assign <- rep(c(6, 4), n/2)
alpha_vec <- c(rgamma(1, 1, 1), rgamma(1, 1, 1), 0, rgamma(1, 1, 1), 0, rgamma(1, 1, 1), rgamma(1, 1, 1))
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
log_alloc_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
log_alloc_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
log_alloc_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
log_alloc_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
rGibb_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rGibb_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
test_c <- rep(NA, 10)
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rGibb_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rGibb_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
log_alloc_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rGibb_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rGibb_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
rGibb_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
rGibb_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
log_alloc_prob(0, c(1, 2, 4, 6, 7), rep(c(1, 2, 4, 6, 7), 3), xi_vec,
scale(rnorm(15)), a_sigma_vec, b_sigma_vec, lambda_vec, mu0_vec)
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
## Data Simulation
rm(list = ls())
seed_val <- 2
### Setting 1
set.seed(seed_val)
ci_actual_1 <- sample(1:2, 500, replace = TRUE)
data_sim_1 <- rnorm(500, c(-5, 5)[ci_actual_1], 1)
### Setting 2
set.seed(seed_val)
ci_actual_2 <- sample(1:5, 500, replace = TRUE)
data_sim_2 <- rnorm(500, c(-100, -50, -20, 50, 100)[ci_actual_2], 1)
### Setting 3
set.seed(seed_val)
ci_actual_3 <- sample(1:2, 500, replace = TRUE)
data_sim_3 <- rnorm(500, c(-5, 5)[ci_actual_3], 4)
### Setting 4
set.seed(seed_val)
ci_actual_4 <- sample(1:5, 500, replace = TRUE)
data_sim_4 <- rnorm(500, c(-10, -5, 0, 20, 40)[ci_actual_4],
c(1.5, 1.5, 1.5, 3, 3)[ci_actual_4])
n_unique <- function(vec){
length(unique(vec))
}
### Setting 1
K <- 10
iter <- 1000
ci_init <- sample(1:1, 500, replace = TRUE)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result1 <- our_model(iter, K, ci_init, xi_vec, scale(data_sim_1), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_1, salso(result1$iter_assign[-(1:1000), ], maxNClusters = K))
plot(1:iter, apply(result1$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
table(ci_actual_1, salso(result1$iter_assign[-(1:500), ], maxNClusters = K))
plot(1:iter, apply(result1$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
result_status <- factor(result1$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result1$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
### Setting 1
K <- 10
iter <- 2000
ci_init <- sample(1:1, 500, replace = TRUE)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result1 <- our_model(iter, K, ci_init, xi_vec, scale(data_sim_1), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_1, salso(result1$iter_assign[-(1:500), ], maxNClusters = K))
plot(1:iter, apply(result1$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
### Setting 1
K <- 10
iter <- 10000
ci_init <- sample(1:1, 500, replace = TRUE)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result1 <- our_model(iter, K, ci_init, xi_vec, scale(data_sim_1), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_1, salso(result1$iter_assign[-(1:500), ], maxNClusters = K))
plot(1:iter, apply(result1$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
result_status <- factor(result1$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result1$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
### Setting 1
K <- 10
iter <- 2500
ci_init <- sample(1:1, 500, replace = TRUE)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result1 <- our_model(iter, K, ci_init, xi_vec, scale(data_sim_1), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_1, salso(result1$iter_assign[-(1:500), ], maxNClusters = K))
plot(1:iter, apply(result1$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
result_status <- factor(result1$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result1$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
### Setting 2
K <- 10
iter <- 2500
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 4
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result2 <- our_model(iter, K, ci_init, xi_vec, scale(data_sim_2), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_2, salso(result2$iter_assign[-(1:1000), ], maxNClusters = K))
plot(1:iter, apply(result2$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
### Setting 2
K <- 10
iter <- 5000
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 4
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result2 <- our_model(iter, K, ci_init, xi_vec, scale(data_sim_2), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_2, salso(result2$iter_assign[-(1:1000), ], maxNClusters = K))
plot(1:iter, apply(result2$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
### Setting 2
K <- 10
iter <- 1000
ci_init <- rep(1, 500)
xi_vec <- rep(100, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 4
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result2 <- our_model(iter, K, ci_init, xi_vec, scale(data_sim_2), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_2, salso(result2$iter_assign[-(1:1000), ], maxNClusters = K))
plot(1:iter, apply(result2$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
## Data Simulation
rm(list = ls())
seed_val <- 2
### Setting 1
set.seed(seed_val)
ci_actual_1 <- sample(1:2, 500, replace = TRUE)
data_sim_1 <- rnorm(500, c(-5, 5)[ci_actual_1], 1)
### Setting 2
set.seed(seed_val)
ci_actual_2 <- sample(1:5, 500, replace = TRUE)
data_sim_2 <- rnorm(500, c(-100, -50, -20, 50, 100)[ci_actual_2], 1)
### Setting 3
set.seed(seed_val)
ci_actual_3 <- sample(1:2, 500, replace = TRUE)
data_sim_3 <- rnorm(500, c(-5, 5)[ci_actual_3], 4)
### Setting 4
set.seed(seed_val)
ci_actual_4 <- sample(1:5, 500, replace = TRUE)
data_sim_4 <- rnorm(500, c(-10, -5, 0, 20, 40)[ci_actual_4],
c(1.5, 1.5, 1.5, 3, 3)[ci_actual_4])
n_unique <- function(vec){
length(unique(vec))
}
### Setting 1
K <- 10
iter <- 1000
ci_init <- sample(1:1, 500, replace = TRUE)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result1 <- SFDM_model(iter, K, ci_init, xi_vec, scale(data_sim_1), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_1, salso(result1$iter_assign[-(1:500), ], maxNClusters = K))
plot(1:iter, apply(result1$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
result_status <- factor(result1$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result1$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
### Setting 2
K <- 10
iter <- 1000
ci_init <- rep(1, 500)
xi_vec <- rep(100, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 4
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result2 <- SFDM_model(iter, K, ci_init, xi_vec, scale(data_sim_2), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_2, salso(result2$iter_assign[-(1:1000), ], maxNClusters = K))
plot(1:iter, apply(result2$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
### Setting 2
K <- 10
iter <- 1000
ci_init <- rep(1, 500)
xi_vec <- rep(100, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 4
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result2 <- SFDM_model(iter, K, ci_init, xi_vec, scale(data_sim_2), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_2, salso(result2$iter_assign[-(1:500), ], maxNClusters = K))
plot(1:iter, apply(result2$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
plot(1:iter, apply(result2$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
result_status <- factor(result2$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result2$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
result_status <- factor(result2$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result2$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
### Setting 3
K <- 10
iter <- 5000
ci_init <- rep(1:1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1000, K)
b_sigma_vec <- rep(100, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result3 <- our_model(iter, K, ci_init, xi_vec, scale(data_sim_3), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
### Setting 3
K <- 10
iter <- 5000
ci_init <- rep(1:1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1000, K)
b_sigma_vec <- rep(100, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result3 <- SFDM_model(iter, K, ci_init, xi_vec, scale(data_sim_3), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_3, salso(result3$iter_assign[-(1:500), ], maxNClusters = K))
plot(1:iter, apply(result3$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
result_status <- factor(result3$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result3$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
### Setting 4
K <- 10
iter <- 5000
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result4 <- SFDM_model(iter, K, ci_init, xi_vec, scale(data_sim_4), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_4, salso(result4$iter_assign[-(1:500), ], maxNClusters = K))
plot(1:iter, apply(result4$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
result_status <- factor(result4$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result4$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
### Setting 2
K <- 10
iter <- 3000
ci_init <- rep(1, 500)
xi_vec <- rep(100, K)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 4
sm_iter <- 10
set.seed(seed_val)
start_time <- Sys.time()
result2 <- SFDM_model(iter, K, ci_init, xi_vec, scale(data_sim_2), mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
Sys.time() - start_time
table(ci_actual_2, salso(result2$iter_assign[-(1:500), ], maxNClusters = K))
plot(1:iter, apply(result2$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
result_status <- factor(result2$sm_status)
levels(result_status) <- c("Reject", "Accept")
result_sm <- factor(result2$split_or_merge)
levels(result_sm) <- c("Merge", "Split")
table(result_status, result_sm)
table(ci_actual_2, salso(result2$iter_assign[-(1:1000), ], maxNClusters = K))
plot(1:iter, apply(result2$iter_assign, 1, n_unique), type = "l",
ylim = c(1, K), xlab = "Iteration", ylab = "Active Cluster")
