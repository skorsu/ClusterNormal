summary_para <- function(result_list){
### Collect the data
n_cluster_vec <- rep(NA, n_para)
time_vec <- rep(NA, n_para)
clus_quality <- matrix(NA, ncol = 3, nrow = n_para)
for(i in 1:n_para){
n_cluster_vec[i] <- result_list[[i]]$n_cluster
time_vec[i] <- result_list[[i]]$time
clus_quality[i, ] <- result_model[[i]]$clus_measure[c(1, 5, 22), 2]
}
data.frame(n_cluster = bal_quan(n_cluster_vec), time = bal_quan(time_vec)) %>%
data.frame(t(apply(clus_quality, 2, bal_quan))) %>%
kbl(col.names = c("# cluster", "time", "Adjusted Rand", "Jaccard", "VI"))
}
### Function: Calculate mean and variance
mean_var <- function(num_vec){
c(mean(num_vec), var(num_vec))
}
## Result for the two separated clusters.
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
## Result for the two separated clusters.
summary_para(result_model)
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- rep(1:2, 100)
dat <- rnorm(500, c(-5, 5)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
### Data Simulation
ci_true <- rep(1:2, 100)
dat <- rnorm(500, c(-5, 5)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
table(clus_assign, ci_true)
clus_assign
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- rep(1:2, 100)
dat <- rnorm(200, c(-5, 5)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 200), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
ci_true <- rep(1:2, 100)
dat <- rnorm(200, c(-5, 5)[ci_true])
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(x), var = var(x))
ci_true <- rep(1:2, 100)
dat <- rnorm(200, c(-5, 5)[ci_true])
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(x), var = var(x))
dat
ci_true <- rep(1:2, 100)
dat <- rnorm(200, c(-5, 5)[ci_true])
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y)) %>%
>$mean
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y)) %>%
.$mean
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y)) %>%
.$mean %>%
mean
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y)) %>%
.$mean %>%
var
ci_true <- rep(1:2, 100)
dat <- rnorm(200, c(-5, 5)[ci_true])
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y)) %>%
.$mean %>%
var
ci_true <- rep(1:2, 100)
dat <- rnorm(200, c(-5, 5)[ci_true])
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y)) %>%
.$mean %>%
var
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), dat,
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
data.frame(x = ci_true, y = dat)  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
mean(dat)
var(dat)
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
data.frame(x = ci_true, y = dat)  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
mean(dat)
var(dat)
mean(scale(dat))
var(scale(dat))
data.frame(x = ci_true, y = scale(dat))  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
data.frame(x = ci_true, y = dat)  %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
### Run the model
K_max <- 6
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
## Result for the four separated clusters.
summary_para(result_model)
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
### Run the model
K_max <- 5
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15,25)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
## Result for the four separated clusters.
summary_para(result_model)
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:6, 500, replace = TRUE)
dat <- rnorm(500, c(-25, -15, -5, 5, 15, 25)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:6, 500, replace = TRUE)
dat <- rnorm(500, c(-25, -15, -5, 5, 15, 25)[ci_true])
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), dat,
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
## Result for the four separated clusters.
summary_para(result_model)
summary_para(result_model)
set.seed(overall_seed)
registerDoParallel(detectCores() - 1)
overall_start <- Sys.time()
result_model <- foreach(i = 1:n_para) %dorng%{
### Data Simulation
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15, 25)[ci_true], (0.1)^2)
### Run the model
K_max <- 10
start_time <- Sys.time()
result <- fmm(iter, K_max, rep(0:0, 500), scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max))
total_time <- difftime(Sys.time(), start_time, units = "secs")
clus_assign <- as.numeric(salso(result[-c(1:burn_in), ], maxNClusters = K_max))
return(list(time = as.numeric(total_time),
clus_assign = clus_assign, ci_true = ci_true,
n_cluster = length(unique(clus_assign)),
clus_measure = mclustcomp(clus_assign, ci_true)))
}
stopImplicitCluster()
summary_para(result_model)
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15, 25)[ci_true])
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15, 25)[ci_true])
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15, 25)[ci_true])
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15, 25)[ci_true])
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y)) %>%
.$mean %>% var
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y))
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15, 25)[ci_true])
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y)) %>%
.$mean %>% var
ci_true <- sample(1:4, 500, replace = TRUE)
dat <- rnorm(500, c(-15, -5, 5, 15)[ci_true])
data.frame(x = ci_true, y = scale(dat)) %>%
group_by(x) %>%
summarise(mean = mean(y), var = var(y)) %>%
.$mean %>% var
