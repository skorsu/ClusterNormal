dat <- rnorm(500, c(5, -5)[actual_clus], 1)
} else {
### Scenario 3
print("Scenario 3")
dat <- rnorm(500, c(5, -5)[actual_clus], 3)
}
} else if(actual_K == 5){ ### Scenario 2 and 4
actual_clus <- rep(1:5, 100)[sample(1:500)]
if(overlap == FALSE){
## Scenario 2
print("Scenario 2")
dat <- rnorm(500, c(-100, -50, -20, 50, 100)[actual_clus], 1)
} else {
### Scenario 4
print("Scenario 4")
dat <- rnorm(500, c(-10, -5, 0, 20, 40)[actual_clus],
c(1.5, 1.5, 1.5, 3, 3)[actual_clus])
}
} else {
warning("invalid values of the actual clusters. (actual_K)")
}
### return the simulated data
result <- data.frame(actual_clus, dat)
return(result)
}
f_data_sim(2, 2, FALSE)
f_data_sim(5, 2, FALSE)
f_data_sim(2, 5, FALSE)
dat <- f_data_sim(2, 5, FALSE)
dat
dat <- f_data_sim(2, 5, FALSE)
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
dat <- f_data_sim(2, 5, FALSE)
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
mod$iter_assign
salso(mod$iter_assign)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 10
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(100, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(10, K)
lambda_vec <- rep(10, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(10, K)
b_sigma_vec <- rep(100, K)
lambda_vec <- rep(10, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(1, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.001, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 8
ci_init <- rep(1, 500)
xi_vec <- rep(0.001, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 8
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(1, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(1, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 5
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
dat <- f_data_sim(2, 5, FALSE)
K <- 10
ci_init <- rep(1, 500)
xi_vec <- rep(0.01, K)
scaled_dat <- scale(dat$dat)
mu0_vec <- rep(0, K)
a_sigma_vec <- rep(100, K)
b_sigma_vec <- rep(1, K)
lambda_vec <- rep(0.01, K)
a_theta <- 1
b_theta <- 1
sm_iter <- 10
mod <- SFDM_model(1000, K, ci_init, xi_vec, scaled_dat, mu0_vec,
a_sigma_vec, b_sigma_vec, lambda_vec, a_theta, b_theta,
sm_iter, 250)
table(dat$actual_clus, salso(mod$iter_assign))
rm(list = ls())
### Final Grade
dat <- read.csv("/Users/kevin-imac/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Teaching/SP 23/STAT 301/Grading/Final_Grade.csv")
grades <- c("F", "D", "C", "C+", "B-", "B", "B+", "A-", "A", "A+")
break_pts <- c(-Inf, 59.99, 69.99, 77.99, 79.99, 81.99, 87.99, 89.99,
91.99, 97.99, Inf)
dat$Adj_Final <- dat$Final.Score + 0.5
dat$Final_Grade <- cut(dat$Final.Score, break_pts, labels=grades)
dat$Final_Grade_Adj <- cut(dat$Adj_Final, break_pts, labels=grades)
dat$Final_Grade_Round_Adj <- cut(ceiling(dat$Adj_Final), break_pts, labels=grades)
sorted_graded <- c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "D", "F")
p1 <- data.frame(table(factor(dat$Final_Grade, levels = sorted_graded))) %>%
ggplot(aes(x = Var1, y = Freq, label = Freq)) +
geom_col(fill = "salmon", alpha = 0.75) +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_bw() +
labs(title = "301-008: Original", x = "Grade", y = " ")
p2 <- data.frame(table(factor(dat$Final_Grade_Round_Adj, levels = sorted_graded))) %>%
ggplot(aes(x = Var1, y = Freq, label = Freq)) +
geom_col(fill = "salmon", alpha = 0.75) +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_bw() +
labs(title = "301-008: Bumped", x = "Grade", y = " ")
grid.arrange(p1, p2)
library(tidyverse)
library(ggplot2)
library(gridExtra)
### Final Grade
dat <- read.csv("/Users/kevin-imac/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Teaching/SP 23/STAT 301/Grading/Final_Grade.csv")
grades <- c("F", "D", "C", "C+", "B-", "B", "B+", "A-", "A", "A+")
break_pts <- c(-Inf, 59.99, 69.99, 77.99, 79.99, 81.99, 87.99, 89.99,
91.99, 97.99, Inf)
dat$Adj_Final <- dat$Final.Score + 0.5
dat$Final_Grade <- cut(dat$Final.Score, break_pts, labels=grades)
dat$Final_Grade_Adj <- cut(dat$Adj_Final, break_pts, labels=grades)
dat$Final_Grade_Round_Adj <- cut(ceiling(dat$Adj_Final), break_pts, labels=grades)
sorted_graded <- c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "D", "F")
p1 <- data.frame(table(factor(dat$Final_Grade, levels = sorted_graded))) %>%
ggplot(aes(x = Var1, y = Freq, label = Freq)) +
geom_col(fill = "salmon", alpha = 0.75) +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_bw() +
labs(title = "301-008: Original", x = "Grade", y = " ")
p2 <- data.frame(table(factor(dat$Final_Grade_Round_Adj, levels = sorted_graded))) %>%
ggplot(aes(x = Var1, y = Freq, label = Freq)) +
geom_col(fill = "salmon", alpha = 0.75) +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_bw() +
labs(title = "301-008: Bumped", x = "Grade", y = " ")
grid.arrange(p1, p2)
dat
?write.csv
dir()
write.csv(dat, file = "final_grade.csv")
dat <- read.csv("/Users/kevin-imac/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Teaching/SP 23/STAT 301/Grading/Final_Grade.csv")
grades <- c("F", "D", "C", "C+", "B-", "B", "B+", "A-", "A", "A+")
break_pts <- c(-Inf, 59.99, 69.99, 77.99, 79.99, 81.99, 87.99, 89.99,
91.99, 97.99, Inf)
dat$Adj_Final <- dat$Final.Score + 0.5
dat$Final_Grade <- cut(dat$Final.Score, break_pts, labels=grades)
dat$Final_Grade_Adj <- cut(dat$Adj_Final, break_pts, labels=grades)
sorted_graded <- c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "D", "F")
p1 <- data.frame(table(factor(dat$Final_Grade, levels = sorted_graded))) %>%
ggplot(aes(x = Var1, y = Freq, label = Freq)) +
geom_col(fill = "salmon", alpha = 0.75) +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_bw() +
labs(title = "301-008: Original", x = "Grade", y = " ")
p2 <- data.frame(table(factor(dat$Final_Grade_Adj, levels = sorted_graded))) %>%
ggplot(aes(x = Var1, y = Freq, label = Freq)) +
geom_col(fill = "salmon", alpha = 0.75) +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_bw() +
labs(title = "301-008: Bumped", x = "Grade", y = " ")
grid.arrange(p1, p2)
library(xtable)
library(ggplot2)
library(gridExtra)
library(xtable)
library(tidyverse)
rm(list = ls())
### Required Packages
library(ggplot2)
library(gridExtra)
library(xtable)
library(tidyverse)
### User-defined functions
### Function: Simulating the data based on the scenario
f_data_sim <- function(sim_seed, actual_K, overlap){
### place for storing result.
actual_clus <- NULL
dat <- NULL
### simulate the data
set.seed(sim_seed)
if(actual_K == 2){ ### Scenario 1 and 3
actual_clus <- rep(1:2, 250)[sample(1:500)]
if(overlap == FALSE){
## Scenario 1
print("Scenario 1")
dat <- rnorm(500, c(5, -5)[actual_clus], 1)
} else {
### Scenario 3
print("Scenario 3")
dat <- rnorm(500, c(5, -5)[actual_clus], 3)
}
} else if(actual_K == 5){ ### Scenario 2 and 4
actual_clus <- rep(1:5, 100)[sample(1:500)]
if(overlap == FALSE){
## Scenario 2
print("Scenario 2")
dat <- rnorm(500, c(-100, -50, -20, 50, 100)[actual_clus], 1)
} else {
### Scenario 4
print("Scenario 4")
dat <- rnorm(500, c(-10, -5, 0, 20, 40)[actual_clus],
c(1.5, 1.5, 1.5, 3, 3)[actual_clus])
}
} else {
warning("invalid values of the actual clusters. (actual_K)")
}
### return the simulated data
result <- data.frame(actual_clus, dat)
return(result)
}
### Function: Summary Quantities "Mean (SD)" for all 15 cases and return it as one table.
bal_quan <- function(num_vec){
}
f_data_sim(1, 2, TRUE)
### Plot
dat <- f_data_sim(1, 2, TRUE)
ggplot(dat, aes(x = dat, y = factor(actual_clus))) +
geom_density()
ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density()
ggplot(dat, aes(x = dat, color = factor(actual_clus))) +
geom_density()
ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density()
ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw()
dat <- f_data_sim(1, 2, TRUE)
ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs("Scenario 3: 2 mixing clusters", x = "Data", y = "Density")
ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 3: 2 mixing clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 2, FALSE)
p1 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 2 separated clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 5, FALSE)
p2 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 5 separated clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 2, TRUE)
p3 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 3: 2 mixing clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 5, TRUE)
p4 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 3: 5 mixing clusters", x = "Data", y = "Density")
grid.arrange(p1, p2, p3, p4)
### Plot
dat <- f_data_sim(1, 2, FALSE)
p1 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 1: 2 separated clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 5, FALSE)
p2 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 2: 5 separated clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 2, TRUE)
p3 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 3: 2 mixing clusters", x = "Data", y = "Density")
dat <- f_data_sim(1, 5, TRUE)
p4 <- ggplot(dat, aes(x = dat, group = factor(actual_clus))) +
geom_density() +
theme_bw() +
labs(title = "Scenario 4: 5 mixing clusters", x = "Data", y = "Density")
grid.arrange(p1, p2, p3, p4)
bal_quan <- function(num_vec, rounding = 4){
mean_val <- round(mean(num_vec), 4)
sd_val <- round(sd(num_vec), 4)
paste0(mean_val, " (", sd_val, ")")
}
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
paste0(result_source, file_prefix)
paste0(result_source, file_prefix, "1", ".RData")
load(paste0(result_source, file_prefix, "1", ".RData"))
list_result
list_result[[1]]
apply(list_result[[1]], 2, bal_quan)
dim(list_result)
str(list_result)
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 6))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
}
sum_tab(list_result)
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 6))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
result
}
sum_tab(list_result)
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 6))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
result <- result[, -c(4:5)]
colnames(result) <- c("Time", "Jaccard", "VI", "P(Accept)")
result
}
sum_tab(list_result)
xtable(sum_tab(list_result))
### Function: Merge all 15 cases into one table
sum_tab <- function(res_list, rr = 4){
result <- data.frame(matrix(NA, nrow = 15, ncol = 6))
for(i in 1:15){
result[i, ] <- apply(list_result[[i]], 2, bal_quan, rounding = rr)
}
result <- result[, -c(4:5)]
colnames(result) <- c("Time", "Jaccard", "VI", "P(Accept)")
xtable(result)
}
sum_tab(list_result)
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
load(paste0(result_source, file_prefix, "2", ".RData"))
sum_tab(list_result)
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
load(paste0(result_source, file_prefix, "3", ".RData"))
sum_tab(list_result)
result_source <- "/Users/kevin-imac/Desktop/Result/"
file_prefix <- "simu_result_scenario_"
load(paste0(result_source, file_prefix, "4", ".RData"))
sum_tab(list_result)
