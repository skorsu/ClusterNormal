ci_true <- rep(0:3, 125)
dat <- rnorm(500, c(-10, -5, 5, 10)[ci_true + 1])
K <- 5
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
rm(list = ls())
set.seed(31)
ci_true <- rep(0:3, 125)
dat <- rnorm(500, c(-10, -5, 5, 10)[ci_true + 1])
K <- 5
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
rm(list = ls())
set.seed(31)
ci_true <- rep(0:3, 125)
dat <- rnorm(500, c(-10, -5, 5, 10)[ci_true + 1])
K <- 5
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
rm(list = ls())
set.seed(31)
ci_true <- rep(0:3, 125)
dat <- rnorm(500, c(-10, -5, 5, 10)[ci_true + 1])
K <- 5
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
rm(list = ls())
set.seed(31)
ci_true <- rep(0:3, 125)
dat <- rnorm(500, c(-10, -5, 5, 10)[ci_true + 1])
K <- 5
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rm(list = ls())
set.seed(31)
ci_true <- rep(0:3, 125)
dat <- rnorm(500, c(-10, -5, 5, 10)[ci_true + 1])
K <- 5
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
test <- SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
test$accept_proposed
test <- SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
test$accept_proposed
test <- SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
test$accept_proposed
test <- SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
test$accept_proposed
test <- SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
test$accept_proposed
test <- SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
test$accept_proposed
test <- SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
test$accept_proposed
accept_vec <- rep(NA, 10000)
for(i in 1:10000){
test <- SFDM_SM(K, ci_true, dat, alpha_vec = c(rgamma(4, 1, 1), 0),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
accept_vec[i] <- test$accept_proposed
}
accept_vec
mean(accept_vec)
SFDM_SM(K, rep(0, 500), dat, alpha_vec = c(rgamma(1, 1, 1), rep(0, 4)),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, rep(0, 500), dat, alpha_vec = c(rgamma(1, 1, 1), rep(0, 4)),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
SFDM_SM(K, rep(0, 500), dat, alpha_vec = c(rgamma(1, 1, 1), rep(0, 4)),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
accept_vec <- rep(NA, 10000)
for(i in 1:10000){
test <- SFDM_SM(K, rep(0, 500), dat, alpha_vec = c(rgamma(1, 1, 1), rep(0, 4)),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
accept_vec[i] <- test$accept_proposed
}
mean(accept_vec)
test
test$new_assign
accept_vec <- rep(NA, 1000)
clus_assign <- matrix(NA, nrow = 500, ncol = 1000)
for(i in 1:1000){
test <- SFDM_SM(K, rep(0, 500), dat, alpha_vec = c(rgamma(1, 1, 1), rep(0, 4)),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
accept_vec[i] <- test$accept_proposed
clus_assign[, i] <- test$new_assign
}
mean(accept_vec)
mean(accept_vec) * 100
table(accept_vec)
accept_vec
1:1000[accept_vec == 1]
(1:1000)[accept_vec == 1]
clus_assign[, 17]
table(clus_assign[, 17])
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
accept_vec <- rep(NA, 1000)
clus_assign <- matrix(NA, nrow = 500, ncol = 1000)
alpha_assign <- matrix(NA, nrow = K, ncol = 1000)
for(i in 1:1000){
test <- SFDM_SM(K, rep(0, 500), dat, alpha_vec = c(rgamma(1, 1, 1), rep(0, 4)),
mu0_cluster = rep(0, K), lambda_cluster = rep(1, K),
a_sigma_cluster = rep(1, K), b_sigma_cluster = rep(1, K),
xi_cluster = rep(1, K), launch_iter = 5, a_theta = 1, b_theta = 1)
accept_vec[i] <- test$accept_proposed
clus_assign[, i] <- test$new_assign
alpha_assign[, i] <- test$new_alpha
}
mean(accept_vec) * 100
(1:1000)[accept_vec == 1]
table(clus_assign[, 4])
clus_assign[, 4]
alpha_assign[, 4]
clus_assign[, 1]
alpha_assign[, 1]
(1:1000)[accept_vec == 1]
table(clus_assign[, 11])
alpha_assign[, 11]
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rm(list = ls())
set.seed(2)
xi_clus <- rep(0.01, 5)
ci_true <- rep(0, 20)
alp <- c(rgamma(0.01, 1), rep(0, 4))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
alp
alp
set.seed(2)
xi_clus <- rep(0.01, 5)
ci_true <- rep(0, 20)
alp <- c(rgamma(1, 0.01, 1), rep(0, 4))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
alp
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
SFDM_alpha(ci_true, xi_clus, alp, rgamma(1, length(ci_true), sum(alp)))
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:2, 500)
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:2, 500, sample = TRUE)
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
K_max <- 5
test_result <- SFDM_model(iter = 5000, K = K_max, init_assign = rep(0, 500), y = dat,
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max), a_theta = 1, b_theta = 1,
launch_iter = 10, print_iter = 500)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
K_max <- 5
test_result <- SFDM_model(iter = 5000, K = K_max, init_assign = rep(0, 500), y = dat,
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max), a_theta = 1, b_theta = 1,
launch_iter = 10, print_iter = 500)
test_result
test_result$iter_assign
test_result$iter_assign[-c(1:2500)]
test_result$iter_assign[-c(1:2500), ]
salso(test_result$iter_assign[-c(1:2500), ])
salso(test_result$iter_assign[-c(1:4000), ])
salso(test_result$iter_assign[-c(1:1000), ])
salso(test_result$iter_assign[-c(1:4900), ])
salso(test_result$iter_assign[-c(1:4500), ])
salso(test_result$iter_assign[-c(1:2500), ])
table(salso(test_result$iter_assign[-c(1:2500), ]), ci_true)
table(salso(test_result$iter_assign[-c(1:4500), ]), ci_true)
table(salso(test_result$iter_assign[-c(1:4900), ]), ci_true)
test_result$split_or_merge
table(test_result$split_or_merge, test_result$sm_status)
set.seed(32134)
### Simulate the data
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
K_max <- 5
test_result <- SFDM_model(iter = 5000, K = K_max, init_assign = rep(0, 500), y = scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max), a_theta = 1, b_theta = 1,
launch_iter = 10, print_iter = 500)
table(test_result$split_or_merge, test_result$sm_status)
table(salso(test_result$iter_assign[-c(1:2500), ]), ci_true)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
K_max <- 5
test_result <- SFDM_model(iter = 5000, K = K_max, init_assign = rep(0, 500), y = scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max), a_theta = 1, b_theta = 1,
launch_iter = 10, print_iter = 500)
table(test_result$split_or_merge, test_result$sm_status)
table(salso(test_result$iter_assign[-c(1:2500), ]), ci_true)
### Required Commands for building the packages: -------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterNormal)
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
K_max <- 5
start_time <- Sys.time()
test_result <- SFDM_model(iter = 5000, K = K_max, init_assign = rep(0, 500), y = scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max), a_theta = 1, b_theta = 1,
launch_iter = 10, print_iter = 500)
print(Sys.time() - start_time)
table(test_result$split_or_merge, test_result$sm_status)
table(salso(test_result$iter_assign[-c(1:2500), ]), ci_true)
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
K_max <- 5
start_time <- Sys.time()
test_result <- SFDM_model(iter = 5000, K = K_max, init_assign = rep(0, 500), y = scale(dat),
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max), a_theta = 1, b_theta = 1,
launch_iter = 10, print_iter = 500)
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[ci_true])
K_max <- 5
start_time <- Sys.time()
test_result <- SFDM_model(iter = 5000, K = K_max, init_assign = rep(0, 500), y = dat,
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max), a_theta = 1, b_theta = 1,
launch_iter = 10, print_iter = 500)
print(Sys.time() - start_time)
table(test_result$split_or_merge, test_result$sm_status)
table(salso(test_result$iter_assign[-c(1:2500), ]), ci_true)
1791 + 212
(1791 + 212)/5000
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
K_max <- 5
start_time <- Sys.time()
test_result <- SFDM_model(iter = 5000, K = K_max, init_assign = rep(0, 500), y = dat,
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max), a_theta = 1, b_theta = 1,
launch_iter = 10, print_iter = 500)
print(Sys.time() - start_time)
table(test_result$split_or_merge, test_result$sm_status)
table(salso(test_result$iter_assign[-c(1:2500), ]), ci_true)
rm(list = ls())
set.seed(32134)
### Simulate the data
ci_true <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, c(-20, -10, 0, 10, 20)[ci_true])
K_max <- 10
start_time <- Sys.time()
test_result <- SFDM_model(iter = 5000, K = K_max, init_assign = rep(0, 500), y = dat,
mu0_cluster = rep(0, K_max), lambda_cluster = rep(1, K_max),
a_sigma_cluster = rep(1, K_max), b_sigma_cluster = rep(1, K_max),
xi_cluster = rep(1, K_max), a_theta = 1, b_theta = 1,
launch_iter = 10, print_iter = 500)
print(Sys.time() - start_time)
table(test_result$split_or_merge, test_result$sm_status)
table(salso(test_result$iter_assign[-c(1:2500), ]), ci_true)
