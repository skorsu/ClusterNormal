rm(list = ls())
### Data Simulation: (3)
set.seed(12441)
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, c(0, 7.5, 15, 25, 35)[ci_true], 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10000)
model_time <- Sys.time() - start_time
model_time
model_time
table(salso(test_result$iter_assign[-c(1:7500), ], maxNClusters = 10), ci_true)
n_active <- apply(test_result$iter_assign, 1, function(x){length(unique(x))})
table(n_active)
apply(test_result$iter_assign, 1, function(x){length(unique(x))}) %>%
plot(type = "l", ylim = c(1, 10))
c(mean(n_active), sd(n_active))
ac <- factor(test_result$sm_status)
levels(ac) <- c("Reject", "Accept")
sm <- factor(test_result$split_or_merge)
levels(sm) <- c("Merge", "Split")
table(ac, sm)
rm(list = ls())
### Data Simulation: (4)
set.seed(12441)
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, (c(0, 7.5, 15, 25, 35)[actual_clus])/2, 1)
rm(list = ls())
### Data Simulation: (4)
set.seed(12441)
N <- 500
K <- 5
ci_true <- sample(1:K, N, replace = TRUE)
dat_sim <- rnorm(N, (c(0, 7.5, 15, 25, 35)[ci_true])/2, 1)
ggplot(data.frame(x = dat_sim, ci_true), aes(x = x, fill = factor(ci_true))) +
geom_histogram(bins = 100) +
theme_bw()
start_time <- Sys.time()
test_result <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_sim, a0 = 1, b0 = 1, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10000)
model_time <- Sys.time() - start_time
model_time
table(salso(test_result$iter_assign[-c(1:7500), ], maxNClusters = 10), ci_true)
n_active <- apply(test_result$iter_assign, 1, function(x){length(unique(x))})
table(n_active)
apply(test_result$iter_assign, 1, function(x){length(unique(x))}) %>%
plot(type = "l", ylim = c(1, 10))
c(mean(n_active), sd(n_active))
ac <- factor(test_result$sm_status)
levels(ac) <- c("Reject", "Accept")
sm <- factor(test_result$split_or_merge)
levels(sm) <- c("Merge", "Split")
table(ac, sm)
install.packages("dirichletprocess")
library(dirichletprocess)
knitr::opts_chunk$set(echo = TRUE)
library(ClusterNormal)
library(tidyverse)
library(factoextra)
library(cluster)
library(EMCluster)
library(AntMAN)
library(dirichletprocess)
library(salso)
### Function: Simulating the data based on the scenario
f_data_sim <- function(sim_seed, scenario_index){
### place for storing result.
actual_clus <- NULL
dat <- NULL
set.seed(sim_seed)
if(! scenario_index %in% 1:4){
warning("invalid scenario. we have only 4 scenarios")
} else {
if(scenario_index == 1){
actual_clus <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[actual_clus])
} else if(scenario_index == 2){
actual_clus <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35))[actual_clus])
} else if(scenario_index == 3){
actual_clus <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[actual_clus], 3)
} else {
actual_clus <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35)[actual_clus])/2, 1)
}
}
### return the simulated data
result <- data.frame(actual_clus, dat)
return(result)
}
### Function: Compute average silhouette for k clusters
### https://uc-r.github.io/kmeans_clustering
avg_sil <- function(k, data_clus) {
km.res <- kmeans(data_clus, centers = k)
ss <- silhouette(km.res$cluster, dist(data_clus))
mean(ss[, 3])
}
### Function: Calculate the BIC for EM algorithm
k_EM_BIC <- function(data_clus, k, em_opt){
### Initialize the model
init_EM <- init.EM(data_clus, nclass = k, EMC = em_opt,
stable.solution = TRUE, min.n = 1, min.n.iter = 10,
method = c("Rnd.EM"))
### Calculate BIC
em.bic(scale(data_list$dat), init_EM)
}
dat_sim <- f_data_sim(31807, 1)
dat_y <- as.numeric(scale(dat_sim$dat, center = FALSE, scale = FALSE))
### K-mean
k_means_sil <- rep(NA, 9)
for(i in 2:10){
k_means_sil[(i-1)] <- avg_sil(i, dat_y)
}
km_method <- kmeans(dat_y, which.max(k_means_sil) + 1)
table(km_method$cluster, dat_sim$actual_clus)
### PAM
pam_sil <- rep(NA, 9)
for(i in 2:10){
pam_sil[(i-1)] <- mean(silhouette(pam(dat_y, i))[, 3])
}
pam_method <- kmeans(dat_y, which.max(pam_sil) + 1)
table(pam_method$cluster, dat_sim$actual_clus)
### EM
em_option <- .EMControl(short.iter = 1)
em_BIC <- rep(NA, 9)
for(i in 2:10){
em_BIC[(i-1)] <- k_EM_BIC(data.frame(dat_y), i, em_option)
}
EM_opt <- which.min(em_BIC) + 1
em_method <- emcluster(data.frame(dat_y), emobj = init.EM(data.frame(dat_y), nclass = EM_opt,
EMC = em_option, stable.solution = TRUE,
min.n = 1, min.n.iter = 10,
method = c("Rnd.EM")),
EMC = em_option, assign.class = TRUE)$class
table(em_method, dat_sim$actual_clus)
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 0.01, sig02 = 0.01)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod<- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
table(AntMAN_method, dat_sim$actual_clus)
### DP
### DP
DirichletProcessGaussian(as.matrix(dat_y))
### DP
DirichletProcessGaussian(as.matrix(dat_y), g0Priors = c(0, 1, 0.01, 0.01))
### DP
DirichletProcessGaussian(as.matrix(dat_y), g0Priors = c(0, 1, 0.01, 0.01), alphaPriors = c(1, 1))
dp_mod <- DirichletProcessGaussian(as.matrix(dat_y),
g0Priors = c(0, 1, 0.01, 0.01), alphaPriors = c(1, 1))
dp_mod <- DirichletProcessGaussian(as.matrix(dat_y),
g0Priors = c(0, 1, 0.01, 0.01), alphaPriors = c(1, 1))
Fit(dp_mod, 10000, updatePrior = FALSE, progressBar = TRUE)
dp_fit <- Fit(dp_mod, 10000, updatePrior = FALSE, progressBar = TRUE)
dp_fit$labelsChain
length(dp_fit$labelsChain)
dp_fit$clusterLabels
for(i in 1:5000){
dp_clus[(5000 + i), ] <- dp_fit$labelsChain[[(5000 + i)]]
}
dp_clus <- matrix(NA, nrow = 5000, ncol = 500)
for(i in 1:5000){
dp_clus[(5000 + i), ] <- dp_fit$labelsChain[[(5000 + i)]]
}
dp_fit$labelsChain[[(5000 + i)]]
dp_clus <- matrix(NA, nrow = 5000, ncol = 500)
for(i in 1:5000){
dp_clus[i, ] <- dp_fit$labelsChain[[(5000 + i)]]
}
salso(dp_clus, maxNClusters = 10)
table(salso(dp_clus, maxNClusters = 10), dat_sim$actual_clus)
for(i in 1:4){
print(paste0("============== Scenario ", i, " (Raw Data) =============="))
dat_sim <- f_data_sim(31807, i)
dat_y <- as.numeric(scale(dat_sim$dat, center = FALSE, scale = FALSE))
### K-mean
k_means_sil <- rep(NA, 9)
for(i in 2:10){
k_means_sil[(i-1)] <- avg_sil(i, dat_y)
}
km_method <- kmeans(dat_y, which.max(k_means_sil) + 1)
print("K-means: ")
table(km_method$cluster, dat_sim$actual_clus) %>% print()
print(" ")
### PAM
pam_sil <- rep(NA, 9)
for(i in 2:10){
pam_sil[(i-1)] <- mean(silhouette(pam(dat_y, i))[, 3])
}
pam_method <- kmeans(dat_y, which.max(pam_sil) + 1)
print("PAM: ")
table(pam_method$cluster, dat_sim$actual_clus)
print(" ")
### EM
em_option <- .EMControl(short.iter = 1)
em_BIC <- rep(NA, 9)
for(i in 2:10){
em_BIC[(i-1)] <- k_EM_BIC(data.frame(dat_y), i, em_option)
}
EM_opt <- which.min(em_BIC) + 1
em_method <- emcluster(data.frame(dat_y), emobj = init.EM(data.frame(dat_y), nclass = EM_opt,
EMC = em_option, stable.solution = TRUE,
min.n = 1, min.n.iter = 10,
method = c("Rnd.EM")),
EMC = em_option, assign.class = TRUE)$class
print("EM: ")
table(em_method, dat_sim$actual_clus)
print(" ")
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 0.01, sig02 = 0.01)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod<- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
print("AntMAN: ")
table(AntMAN_method, dat_sim$actual_clus)
print(" ")
### DP
dp_mod <- DirichletProcessGaussian(as.matrix(dat_y),
g0Priors = c(0, 1, 0.01, 0.01), alphaPriors = c(1, 1))
dp_fit <- Fit(dp_mod, 10000, updatePrior = FALSE, progressBar = TRUE)
dp_clus <- matrix(NA, nrow = 5000, ncol = 500)
for(i in 1:5000){
dp_clus[i, ] <- dp_fit$labelsChain[[(5000 + i)]]
}
print("DP: ")
table(salso(dp_clus, maxNClusters = 10), dat_sim$actual_clus)
print(" ")
}
knitr::opts_chunk$set(echo = TRUE)
library(ClusterNormal)
library(tidyverse)
library(factoextra)
library(cluster)
library(EMCluster)
library(AntMAN)
library(dirichletprocess)
library(salso)
### Data Simulation
f_data_sim(31807, 1)
### Function: Simulating the data based on the scenario
f_data_sim <- function(sim_seed, scenario_index){
### place for storing result.
actual_clus <- NULL
dat <- NULL
set.seed(sim_seed)
if(! scenario_index %in% 1:4){
warning("invalid scenario. we have only 4 scenarios")
} else {
if(scenario_index == 1){
actual_clus <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[actual_clus])
} else if(scenario_index == 2){
actual_clus <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35))[actual_clus])
} else if(scenario_index == 3){
actual_clus <- sample(1:2, 500, replace = TRUE)
dat <- rnorm(500, c(-5, 5)[actual_clus], 3)
} else {
actual_clus <- sample(1:5, 500, replace = TRUE)
dat <- rnorm(500, (c(0, 7.5, 15, 25, 35)[actual_clus])/2, 1)
}
}
### return the simulated data
result <- data.frame(actual_clus, dat)
return(result)
}
knitr::opts_chunk$set(echo = TRUE)
library(ClusterNormal)
library(tidyverse)
library(factoextra)
library(cluster)
library(EMCluster)
library(AntMAN)
library(dirichletprocess)
library(salso)
### Data Simulation
f_data_sim(31807, 1)
### Data Simulation
dat_sim <- f_data_sim(31807, 1)
dat_y <- dat_sim$dat
### Data Simulation
dat_sim <- f_data_sim(31807, 1)
dat_y <- dat_sim$dat
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm()
AM_mix_hyperparams_uninorm()
data_hyper <- AM_mix_hyperparams_uninorm(m0=0, k0=1, nu0=3, sig02=1)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 3, sig02 = 1)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod <- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
AntMAN_method
table(AntMAN_method)
table(AntMAN_method, dat_sim$actual_clus)
### Data Simulation
dat_sim <- f_data_sim(31807, 1)
dat_y <- dat_sim$dat
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 1, sig02 = 1)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod <- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
table(AntMAN_method, dat_sim$actual_clus)
### Data Simulation
dat_sim <- f_data_sim(31807, 4)
dat_y <- dat_sim$dat
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 1, sig02 = 1)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod <- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
table(AntMAN_method, dat_sim$actual_clus)
### Data Simulation
dat_sim <- f_data_sim(31807, 4)
dat_y <- dat_sim$dat
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 1, sig02 = 1)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod <- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
table(AntMAN_method, dat_sim$actual_clus)
model <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_y, a0 = 0.01, b0 = 0.01, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10001)
model$iter_assign[-c(1:5000), ]
table(salso(model$iter_assign[-(1:5000), ]), dat_sim$actual_clus)
table("SFDMM" = salso(model$iter_assign[-(1:5000), ]), dat_sim$actual_clus)
### Data Simulation
dat_sim <- f_data_sim(31807, 4)
dat_y <- dat_sim$dat
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 3, sig02 = 2)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod <- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
table(AntMAN_method, dat_sim$actual_clus)
model <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_y, a0 = 0.01, b0 = 0.01, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10001)
table("SFDMM" = salso(model$iter_assign[-(1:5000), ]), dat_sim$actual_clus)
### Data Simulation
dat_sim <- f_data_sim(31807, 4)
dat_y <- dat_sim$dat
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 0.1, sig02 = 0.1)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod <- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
table(AntMAN_method, dat_sim$actual_clus)
model <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_y, a0 = 0.01, b0 = 0.01, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10001)
table("SFDMM" = salso(model$iter_assign[-(1:5000), ]), dat_sim$actual_clus)
### Data Simulation
dat_sim <- f_data_sim(31807, 3)
dat_y <- dat_sim$dat
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 0.1, sig02 = 0.1)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod <- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
table(AntMAN_method, dat_sim$actual_clus)
model <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_y, a0 = 0.01, b0 = 0.01, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10001)
table("SFDMM" = salso(model$iter_assign[-(1:5000), ]), dat_sim$actual_clus)
?AM_mcmc_fit
### Raw data
for(i in 1:4){
dat_sim <- f_data_sim(345324, i)
dat_y <- dat_sim$dat
print(paste0("============== Scenario ", i, " (Raw Data) =============="))
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 0.1, sig02 = 0.1)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod <- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
table("AntMAN" = AntMAN_method, "Actual" = dat_sim$actual_clus) %>% print()
### SFDMM
model <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_y, a0 = 0.01, b0 = 0.01, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10001)
table("SFDMM" = salso(model$iter_assign[-(1:5000), ]),
"Actual" = dat_sim$actual_clus) %>% print()
}
?DirichletProcessGaussian
?Fit
dp_mod <- DirichletProcessGaussian(as.matrix(dat_y),
g0Priors = c(0, 1, 0.01, 0.01), alphaPriors = c(1, 1))
dp_fit <- Fit(dp_mod, 10000, updatePrior = TRUE, progressBar = TRUE)
dp_mod <- DirichletProcessGaussian(as.matrix(dat_y),
g0Priors = c(0, 1, 0.01, 0.01), alphaPriors = c(1, 1))
dp_fit <- Fit(dp_mod, 10000, updatePrior = FALSE, progressBar = TRUE)
dp_clus <- matrix(NA, nrow = 5000, ncol = 500)
for(i in 1:5000){
dp_clus[i, ] <- dp_fit$labelsChain[[(5000 + i)]]
}
dp_clus
salso(dp_clus)
### Raw data
for(i in 1:4){
dat_sim <- f_data_sim(345324, i)
dat_y <- dat_sim$dat
print(paste0("============== Scenario ", i, " (Raw Data) =============="))
### AntMAN
AntMAN_MCMC <- AM_mcmc_parameters(niter = 10000, burnin = 5000, thin = 1,
verbose = 1, output = c("CI", "K"),
parallel = FALSE, output_dir = NULL)
data_hyper <- AM_mix_hyperparams_uninorm(m0 = 0, k0 = 1, nu0 = 0.1, sig02 = 0.1)
cluster_hyper <- AM_mix_weights_prior_gamma(a = 1, b = 1)
AntMAN_mod <- AntMAN::AM_mcmc_fit(y = dat_y, initial_clustering = rep(1, 500),
mix_kernel_hyperparams = data_hyper,
mix_weight_prior = cluster_hyper,
mcmc_parameters = AntMAN_MCMC)
AntMAN_method <- as.numeric(salso(AM_clustering(AntMAN_mod), maxNClusters = 10))
table("AntMAN" = AntMAN_method, "Actual" = dat_sim$actual_clus) %>% print()
### SFDMM
model <- SFDMM_model(iter = 10000, K_max = 10, init_assign = rep(0, 500),
y = dat_y, a0 = 0.01, b0 = 0.01, mu0 = 0, s20 = 100,
xi0 = 1, a_theta = 1, b_theta = 1, launch_iter = 10,
print_iter = 10001)
table("SFDMM" = salso(model$iter_assign[-(1:5000), ]),
"Actual" = dat_sim$actual_clus) %>% print()
### DP
dp_mod <- DirichletProcessGaussian(as.matrix(dat_y),
g0Priors = c(0, 1, 0.01, 0.01), alphaPriors = c(1, 1))
dp_fit <- Fit(dp_mod, 10000, updatePrior = FALSE, progressBar = TRUE)
dp_clus <- matrix(NA, nrow = 5000, ncol = 500)
for(i in 1:5000){
dp_clus[i, ] <- dp_fit$labelsChain[[(5000 + i)]]
}
table("DP" = salso(dp_clus),
"Actual" = dat_sim$actual_clus) %>% print()
}
